"""
Autogenerated input for modifying instance of Action
"""
type ActionInputProxy {
  id: ID!
  type: ID
  object: ID
}

type ActionObjectUnion {
  id: ID!
  producer: ID
  facility: ID
  vehicle: ID
  pathType: PathTypeEnumOutput
  tiles: [ID]
  order: Order
}

input ActionObjectUnionAsInput {
  id: ID!
  producer: ID
  facility: ID
  vehicle: ID
  pathType: PathTypeEnumAsInput
  tiles: [ID]
  order: OrderAsInput
}

"""
Autogenerated input for modifying instance of ActionObjectUnion
"""
type ActionObjectUnionInputProxy {
  id: ID!
  producer: ID
  facility: ID
  vehicle: ID
  pathType: ID
  tiles: [ID]
  order: ID
}

type ActionProgress {
  id: ID!
  type: ActionTypeEnumOutput!
  step: Float!
  remainingSteps: Float!
  status: ActionStatusEnumOutput!
  info: String
  object: ActionObjectUnion!
  sim: ID!
}

input ActionProgressAsInput {
  id: ID!
  type: ActionTypeEnumAsInput!
  step: Float!
  remainingSteps: Float!
  status: ActionStatusEnumAsInput!
  info: String
  object: ActionObjectUnionAsInput!
  sim: ID!
}

"""
Autogenerated input for modifying instance of ActionProgress
"""
type ActionProgressInputProxy {
  id: ID!
  action: ID
  step: Float
  remainingSteps: Float
  status: ActionStatusEnumOutput
  info: String
}

type ActionsReport {
  id: ID!
  progress: [ActionProgress!]
  ok: Boolean!
}

input ActionsReportAsInput {
  id: ID!
  progress: [ActionProgressAsInput!]!
  ok: Boolean!
}

type ActionsReportOutput {
  id: ID!
  progress: [ActionProgress!]!
  ok: Boolean!
}

type ActionStatusEnum {
  id: ID!
}

input ActionStatusEnumAsInput {
  id: ID!
}

type ActionStatusEnumOutput {
  id: ID!
}

type ActionTypeEnum {
  id: ID!
}

input ActionTypeEnumAsInput {
  id: ID!
}

type ActionTypeEnumOutput {
  id: ID!
}

type ActionTypeRequirement {
  id: ID!
  type: ActionTypeEnumOutput!
  time: Float!
  cost: Float!
  inputs: [ProductQuantity!]!
}

input ActionTypeRequirementAsInput {
  id: ID!
  type: ActionTypeEnumAsInput!
  time: Float!
  cost: Float!
  inputs: [ProductQuantityAsInput!]!
}

"""
Autogenerated input for adding instance of ActionInputProxy
"""
input AddActionInputProxyInput {
  id: ID
  type: ID
  object: ID
}

"""
Autogenerated input for adding instance of ActionObjectUnion
"""
input AddActionObjectUnionInput {
  id: ID
  producer: ID
  facility: ID
  vehicle: ID
  pathType: ID
  tiles: [ID]
  order: ID
}

"""
Autogenerated input for adding instance of ActionObjectUnionInputProxy
"""
input AddActionObjectUnionInputProxyInput {
  id: ID
  producer: ID
  facility: ID
  vehicle: ID
  pathType: ID
  tiles: [ID]
  order: ID
}

"""
Autogenerated input for adding instance of ActionProgress
"""
input AddActionProgressInput {
  id: ID
  type: ID!
  step: Float!
  remainingSteps: Float!
  status: ID!
  info: String
  object: ID!
  sim: ID!
}

"""
Autogenerated input for adding instance of ActionProgressInputProxy
"""
input AddActionProgressInputProxyInput {
  id: ID
  action: ID
  step: Float
  remainingSteps: Float
  status: ID
  info: String
}

"""
Autogenerated input for adding instance of ActionsReport
"""
input AddActionsReportInput {
  id: ID
  progress: [ID!]
  ok: Boolean!
}

"""
Autogenerated input for adding instance of ActionStatusEnum
"""
input AddActionStatusEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of ActionTypeEnum
"""
input AddActionTypeEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of ActionTypeRequirement
"""
input AddActionTypeRequirementInput {
  id: ID
  type: ID!
  time: Float!
  cost: Float!
  inputs: [ID!]
}

"""
Autogenerated input for adding instance of CitiesReport
"""
input AddCitiesReportInput {
  id: ID
}

"""
Autogenerated input for adding instance of CityConfig
"""
input AddCityConfigInput {
  id: ID
  growthRate: Float!
  declineRate: Float!
  initialPopulation: Float!
  demandsPerPersonPerStep: [ID!]
  defaultLevel: ID!
  consumables: [ID!]
  density: Float!
}

"""
Autogenerated input for adding instance of City
"""
input AddCityInput {
  id: ID
  sim: ID!
  population: Float!
  consumables: [ID!]
  level: ID!
  x: Int!
  y: Int!
}

"""
Autogenerated input for adding instance of CityInputProxy
"""
input AddCityInputProxyInput {
  id: ID
  sim: ID
  population: Float
  consumables: [ID]
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for adding instance of CityLevel
"""
input AddCityLevelInput {
  id: ID
  storageCapacityModifier: Float!
  actionTypeRequirements: [ID!]
  nextLevel: ID
}

"""
Autogenerated input for adding instance of CompanyConfig
"""
input AddCompanyConfigInput {
  id: ID
  initialCredit: Float!
}

"""
Autogenerated input for adding instance of Company
"""
input AddCompanyInput {
  id: ID
  name: String!
  credit: Float!
  facilityUnlocks: [ID!]
  vehicleUnlocks: [ID!]
  producerUnlocks: [ID!]
  storageDepotUnlocks: [ID!]
  config: ID!
}

"""
Autogenerated input for adding instance of CompanyInputProxy
"""
input AddCompanyInputProxyInput {
  id: ID
  name: String
  credit: Float
  facilityUnlocks: [ID]
  vehicleUnlocks: [ID]
  producerUnlocks: [ID]
  storageDepotUnlocks: [ID]
  config: ID
}

"""
Autogenerated input for adding instance of CompanyReport
"""
input AddCompanyReportInput {
  id: ID
  production: ID!
  actions: ID!
}

"""
Autogenerated input for adding instance of Consumable
"""
input AddConsumableInput {
  id: ID
  storage: ID!
  basePricePerUnit: Float!
  minPriceBasisPct: Float!
}

"""
Autogenerated input for adding instance of ConsumableInputProxy
"""
input AddConsumableInputProxyInput {
  id: ID
  storage: ID
  basePricePerUnit: Float
  minPriceBasisPct: Float
}

"""
Autogenerated input for adding instance of CounterpartyUnion
"""
input AddCounterpartyUnionInput {
  id: ID
  city: ID
  producer: ID
}

"""
Autogenerated input for adding instance of Facility
"""
input AddFacilityInput {
  id: ID
  sim: ID!
  type: ID!
  level: ID!
  x: Int!
  y: Int!
}

"""
Autogenerated input for adding instance of FacilityInputProxy
"""
input AddFacilityInputProxyInput {
  id: ID
  sim: ID
  type: ID
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for adding instance of FacilityLevel
"""
input AddFacilityLevelInput {
  id: ID
  type: ID!
  nextLevel: ID
  maxVehicleLevel: ID
  energyDemandBaseline: Float!
  fuelDemandBaseline: Float!
  fuelStorage: ID!
  perVehicleEnergyFactor: Float!
  perVehicleFuelFactor: Float!
  repairEfficiency: Float!
  actionRequirements: [ID!]
}

"""
Autogenerated input for adding instance of FacilityTypeEnum
"""
input AddFacilityTypeEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of FieldFilterInputProxy
"""
input AddFieldFilterInputProxyInput {
  id: ID
  fieldName: String!
  op: String!
  value: ID!
}

"""
Autogenerated input for adding instance of FieldValue
"""
input AddFieldValueInput {
  """
  Ephemeral ID
  """
  id: ID
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

"""
Autogenerated input for adding instance of FinancialReport
"""
input AddFinancialReportInput {
  id: ID
  costs: Float!
  revenue: Float!
  profit: Float!
}

"""
Autogenerated input for adding instance of MapArea
"""
input AddMapAreaInput {
  id: ID
  mapId: ID!
  tileIds: ID!
}

"""
Autogenerated input for adding instance of MapConfig
"""
input AddMapConfigInput {
  id: ID
  loadConfig: ID
  generateConfig: ID
}

"""
Autogenerated input for adding instance of MapGenerationConfig
"""
input AddMapGenerationConfigInput {
  id: ID
  sizeX: Int!
  sizeY: Int!
}

"""
Autogenerated input for adding instance of Map
"""
input AddMapInput {
  id: ID
  sizeX: Int!
  sizeY: Int!
}

"""
Autogenerated input for adding instance of MapInputProxy
"""
input AddMapInputProxyInput {
  id: ID
  sizeX: Int
  sizeY: Int
}

"""
Autogenerated input for adding instance of MapLoadConfig
"""
input AddMapLoadConfigInput {
  id: ID
}

"""
Autogenerated input for adding instance of OrderedLocation
"""
input AddOrderedLocationInput {
  id: ID
  order: Int!
  x: Int!
  y: Int!
  sim: ID!
  path: ID!
}

"""
Autogenerated input for adding instance of Order
"""
input AddOrderInput {
  id: ID
  product: ID!
  orderType: ID!
  vehicle: ID!
  paths: [ID!]
  counterparty: ID!
  sim: ID!
}

"""
Autogenerated input for adding instance of OrderTypeEnum
"""
input AddOrderTypeEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of PathConfig
"""
input AddPathConfigInput {
  id: ID
  type: ID!
  actionRequirements: [ID!]
}

"""
Autogenerated input for adding instance of Path
"""
input AddPathInput {
  id: ID
  type: ID!
  orderedLocations: [ID!]
  sim: ID!
}

"""
Autogenerated input for adding instance of PathInputProxy
"""
input AddPathInputProxyInput {
  id: ID
  type: ID
  orderedLocations: [ID]
  sim: ID
}

"""
Autogenerated input for adding instance of PathTypeEnum
"""
input AddPathTypeEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of Producer
"""
input AddProducerInput {
  id: ID
  sim: ID!
  level: ID!
  storage: [ID!]
  type: ID!
  x: Int!
  y: Int!
}

"""
Autogenerated input for adding instance of ProducerInputProxy
"""
input AddProducerInputProxyInput {
  id: ID
  sim: ID
  level: ID
  storage: [ID]
  type: ID
  x: Int
  y: Int
}

"""
Autogenerated input for adding instance of ProducerLevel
"""
input AddProducerLevelInput {
  id: ID
  actionRequirements: [ID!]
  baseCostPerUnit: Float!
  stoppageSurchargeRate: Float!
  nextLevel: ID
  inputs: [ID!]
  outputs: [ID!]
  storage: [ID!]
}

"""
Autogenerated input for adding instance of ProducerTypeEnum
"""
input AddProducerTypeEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of ProductionReport
"""
input AddProductionReportInput {
  id: ID
  producerReports: [ID!]
  ok: Boolean!
}

"""
Autogenerated input for adding instance of ProductQuantity
"""
input AddProductQuantityInput {
  id: ID
  type: ID!
  quantity: Float!
}

"""
Autogenerated input for adding instance of ProductTypeEnum
"""
input AddProductTypeEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of ResearchStatusEnum
"""
input AddResearchStatusEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of SimObjects
"""
input AddSimObjectsInput {
  id: ID
  cities: [ID!]
  producers: [ID!]
  facilities: [ID!]
  paths: [ID!]
  vehicles: [ID!]
  supplyDepots: [ID!]
}

"""
Autogenerated input for adding instance of SimulationConfig
"""
input AddSimulationConfigInput {
  id: ID
  seed: Float!
  mapConfig: ID!
  companyConfig: ID!
  cityConfig: ID!
  pathConfigs: [ID!]
}

"""
Autogenerated input for adding instance of Simulation
"""
input AddSimulationInput {
  id: ID
  config: ID!
  company: ID!
  map: ID!
  step: Float!
  status: ID!
}

"""
Autogenerated input for adding instance of SimulationInputProxy
"""
input AddSimulationInputProxyInput {
  id: ID
  config: ID
  company: ID
  map: ID
  step: Float
  status: ID
}

"""
Autogenerated input for adding instance of SimulationStatusEnum
"""
input AddSimulationStatusEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of SimulationStepResult
"""
input AddSimulationStepResultInput {
  id: ID
  status: ID!
  companyReport: ID!
}

"""
Autogenerated input for adding instance of StorageAmount
"""
input AddStorageAmountInput {
  id: ID
  storage: ID!
  amount: Float!
}

"""
Autogenerated input for adding instance of Storage
"""
input AddStorageInput {
  id: ID
  product: ID!
  capacity: Float!
  amount: Float!
}

"""
Autogenerated input for adding instance of StorageInputProxy
"""
input AddStorageInputProxyInput {
  id: ID
  product: ID
  capacity: Float
  amount: Float
}

"""
Autogenerated input for adding instance of StorageTransaction
"""
input AddStorageTransactionInput {
  id: ID
  storage: ID!
  originalAmount: Float!
  requestedAmount: Float!
  actualAmount: Float!
  ok: Boolean!
}

"""
Autogenerated input for adding instance of StorageTransactionReport
"""
input AddStorageTransactionReportInput {
  id: ID
  withdrawals: [ID!]
  deposits: [ID!]
  withdrawalCommits: [ID!]
  depositCommits: [ID!]
  ok: Boolean!
}

"""
Autogenerated input for adding instance of SupplyDepot
"""
input AddSupplyDepotInput {
  id: ID
  sim: ID!
  level: ID!
  x: Int!
  y: Int!
}

"""
Autogenerated input for adding instance of SupplyDepotInputProxy
"""
input AddSupplyDepotInputProxyInput {
  id: ID
  sim: ID
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for adding instance of SupplyDepotLevel
"""
input AddSupplyDepotLevelInput {
  id: ID
  storage: [ID!]
  nextLevel: ID
  actionRequirements: [ID!]
}

"""
Autogenerated input for adding instance of Tile
"""
input AddTileInput {
  id: ID
  map: ID!
  type: ID!
  x: Int!
  y: Int!
}

"""
Autogenerated input for adding instance of TileTypeEnum
"""
input AddTileTypeEnumInput {
  id: ID
}

"""
Autogenerated input for adding instance of Vehicle
"""
input AddVehicleInput {
  id: ID
  level: ID!
  sim: ID!
  type: ID!
  facility: ID!
  x: Int!
  y: Int!
}

"""
Autogenerated input for adding instance of VehicleInputProxy
"""
input AddVehicleInputProxyInput {
  id: ID
  level: ID
  sim: ID
  type: ID
  facility: ID
  x: Int
  y: Int
}

"""
Autogenerated input for adding instance of VehicleLevel
"""
input AddVehicleLevelInput {
  id: ID
  cargoCapacity: [ID!]
  maxSpeed: Float!
  maxDistance: Float!
  reliability: Float!
  maintainAfterSteps: Int!
  durability: Float!
}

"""
Autogenerated input for adding instance of VehiclePathCompatibility
"""
input AddVehiclePathCompatibilityInput {
  id: ID
  vehicleType: ID!
  pathType: ID!
}

"""
Autogenerated input for adding instance of VehicleTypeEnum
"""
input AddVehicleTypeEnumInput {
  id: ID
}

enum AggregateOp {
  MIN
  MAX
  SUM
  COUNT
}

type CitiesReport {
  id: ID!
}

type City {
  id: ID!
  sim: ID!
  population: Float!
  consumables: [Consumable!]
  level: CityLevel!
  x: Int!
  y: Int!
}

input CityAsInput {
  id: ID!
  sim: ID!
  population: Float!
  consumables: [ConsumableAsInput!]!
  level: CityLevelAsInput!
  x: Int!
  y: Int!
}

type CityConfig {
  id: ID!
  growthRate: Float!
  declineRate: Float!
  initialPopulation: Float!
  demandsPerPersonPerStep: [ProductQuantity!]!
  defaultLevel: ID!
  consumables: [ConsumableOutput!]!
  density: Float!
}

input CityConfigAsInput {
  id: ID!
  growthRate: Float!
  declineRate: Float!
  initialPopulation: Float!
  demandsPerPersonPerStep: [ProductQuantityAsInput!]!
  defaultLevel: ID!
  consumables: [ConsumableAsInput!]!
  density: Float!
}

"""
Autogenerated input for modifying instance of City
"""
type CityInputProxy {
  id: ID!
  sim: ID
  population: Float
  consumables: [ID]
  level: ID
  x: Int
  y: Int
}

type CityLevel {
  id: ID!
  storageCapacityModifier: Float!
  actionTypeRequirements: [ActionTypeRequirement!]!
  nextLevel: ID
}

input CityLevelAsInput {
  id: ID!
  storageCapacityModifier: Float!
  actionTypeRequirements: [ActionTypeRequirementAsInput!]!
  nextLevel: ID
}

type CityOutput {
  id: ID!
  sim: ID!
  population: Float!
  consumables: [ConsumableOutput!]!
  level: CityLevel!
  x: Int!
  y: Int!
}

type Company {
  id: ID!
  name: String!
  credit: Float!
  facilityUnlocks: [FacilityLevel!]!
  vehicleUnlocks: [VehicleLevel!]!
  producerUnlocks: [ProducerLevelOutput!]!
  storageDepotUnlocks: [SupplyDepotLevelOutput!]!
  config: CompanyConfig!
}

input CompanyAsInput {
  id: ID!
  name: String!
  credit: Float!
  facilityUnlocks: [FacilityLevelAsInput!]!
  vehicleUnlocks: [VehicleLevelAsInput!]!
  producerUnlocks: [ProducerLevelAsInput!]!
  storageDepotUnlocks: [SupplyDepotLevelAsInput!]!
  config: CompanyConfigAsInput!
}

type CompanyConfig {
  id: ID!
  initialCredit: Float!
}

input CompanyConfigAsInput {
  id: ID!
  initialCredit: Float!
}

"""
Autogenerated input for modifying instance of Company
"""
type CompanyInputProxy {
  id: ID!
  name: String
  credit: Float
  facilityUnlocks: [ID]
  vehicleUnlocks: [ID]
  producerUnlocks: [ID]
  storageDepotUnlocks: [ID]
  config: ID
}

type CompanyReport {
  id: ID!
  production: ProductionReport!
  actions: ActionsReport!
}

input CompanyReportAsInput {
  id: ID!
  production: ProductionReportAsInput!
  actions: ActionsReportAsInput!
}

type CompanyReportOutput {
  id: ID!
  production: ProductionReportOutput!
  actions: ActionsReportOutput!
}

type Consumable {
  id: ID!
  storage: Storage!
  basePricePerUnit: Float!
  minPriceBasisPct: Float!
}

input ConsumableAsInput {
  id: ID!
  storage: StorageAsInput!
  basePricePerUnit: Float!
  minPriceBasisPct: Float!
}

"""
Autogenerated input for modifying instance of Consumable
"""
type ConsumableInputProxy {
  id: ID!
  storage: ID
  basePricePerUnit: Float
  minPriceBasisPct: Float
}

type ConsumableOutput {
  id: ID!
  storage: StorageOutput!
  basePricePerUnit: Float!
  minPriceBasisPct: Float!
}

type CounterpartyUnion {
  id: ID!
  city: CityOutput
  producer: Producer
}

input CounterpartyUnionAsInput {
  id: ID!
  city: CityAsInput
  producer: ProducerAsInput
}

"""
RFC 3339 compatible Calendar Date representation. The only acceptable Date format is YYYY-MM-DD
"""
scalar Date

"""
RFC 3339 compatible date and time representation, with mandatory time zone.
Acceptable format is YYYY-MM-DD`T`HH:mm:ss[.SSS](`Z`|(`+`/`-`)HH:mm)
"""
scalar DateTime

type Facility {
  id: ID!
  sim: ID!
  type: FacilityTypeEnumOutput!
  level: FacilityLevel!
  x: Int!
  y: Int!
}

input FacilityAsInput {
  id: ID!
  sim: ID!
  type: FacilityTypeEnumAsInput!
  level: FacilityLevelAsInput!
  x: Int!
  y: Int!
}

"""
Autogenerated input for modifying instance of Facility
"""
type FacilityInputProxy {
  id: ID!
  sim: ID
  type: ID
  level: ID
  x: Int
  y: Int
}

type FacilityLevel {
  id: ID!
  type: FacilityTypeEnumOutput!
  nextLevel: ID
  maxVehicleLevel: ID
  energyDemandBaseline: Float!
  fuelDemandBaseline: Float!
  fuelStorage: StorageOutput!
  perVehicleEnergyFactor: Float!
  perVehicleFuelFactor: Float!
  repairEfficiency: Float!
  actionRequirements: [ActionTypeRequirement!]!
}

input FacilityLevelAsInput {
  id: ID!
  type: FacilityTypeEnumAsInput!
  nextLevel: ID
  maxVehicleLevel: ID
  energyDemandBaseline: Float!
  fuelDemandBaseline: Float!
  fuelStorage: StorageAsInput!
  perVehicleEnergyFactor: Float!
  perVehicleFuelFactor: Float!
  repairEfficiency: Float!
  actionRequirements: [ActionTypeRequirementAsInput!]!
}

type FacilityTypeEnum {
  id: ID!
}

input FacilityTypeEnumAsInput {
  id: ID!
}

type FacilityTypeEnumOutput {
  id: ID!
}

input FieldFilterInput {
  """
  one of the following is required
  """
  fieldId: ID
  fieldName: String
  op: String!
  value: FieldValueInput!
}

type FieldFilterInputProxy {
  fieldName: String!
  op: String!
  value: FieldValue!
}

input FieldProjectionInput {
  """
  one of the following is required - except in the case of count queries
  """
  fieldId: ID
  fieldName: String

  """
  optional if omitted outer query is used
  """
  alias: String
  op: AggregateOp
}

type FieldValue {
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

input FieldValueInput {
  """
  Types
  """
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  """
  List forms
  """
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

type FinancialReport {
  id: ID!
  costs: Float!
  revenue: Float!
  profit: Float!
}

type Info {
  id: ID!
  name: String!
  description: String
}

type InstanceSet {
  kindId: ID!

  """
  Continuation token
  """
  token: String
  fieldIds: [ID]

  """
  rowKeys: [Int]
  """
  records: [[FieldValue]]
}

scalar JSON

input KindQueryInput {
  """
  projected kind (one of the following is required)
  """
  kindId: ID
  kindName: String
  serviceId: ID

  """
  optional alias for projection binding
  """
  alias: String

  """
  projected fields
  """
  projection: [FieldProjectionInput]

  """
  distinct Projected result
  """
  distinct: Boolean

  """
  filters (where)
  """
  fieldFilters: [FieldFilterInput]

  """
  conjunction (where)
  """
  and: [KindQueryInput]

  """
  disjunction (where)
  """
  or: [KindQueryInput]

  """
  join (if conjunction or disjunction)
  """
  fromFieldId: ID
  fromFieldName: String
  toFieldId: ID
  toFieldName: String
  take: Int
  token: String
}

type Map {
  id: ID!
  sizeX: Int!
  sizeY: Int!
}

type MapArea {
  id: ID!
  mapId: ID!
  tileIds: ID!
}

input MapAsInput {
  id: ID!
  sizeX: Int!
  sizeY: Int!
}

type MapConfig {
  id: ID!
  loadConfig: MapLoadConfig
  generateConfig: MapGenerationConfig
}

input MapConfigAsInput {
  id: ID!
  loadConfig: MapLoadConfigAsInput
  generateConfig: MapGenerationConfigAsInput
}

type MapGenerationConfig {
  id: ID!
  sizeX: Int!
  sizeY: Int!
}

input MapGenerationConfigAsInput {
  id: ID!
  sizeX: Int!
  sizeY: Int!
}

"""
Autogenerated input for modifying instance of Map
"""
type MapInputProxy {
  id: ID!
  sizeX: Int
  sizeY: Int
}

type MapLoadConfig {
  id: ID!
}

input MapLoadConfigAsInput {
  id: ID!
}

type MapOutput {
  id: ID!
  sizeX: Int!
  sizeY: Int!
}

type Mutation {
  """
  Autogenerated mutation for adding single instance of SimulationStatusEnum
  """
  addSimulationStatusEnum(input: AddSimulationStatusEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of SimulationStatusEnum
  """
  addSimulationStatusEnums(input: [AddSimulationStatusEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of SimulationStatusEnum
  """
  updateSimulationStatusEnum(input: UpdateSimulationStatusEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of SimulationStatusEnum
  """
  updateSimulationStatusEnums(input: [UpdateSimulationStatusEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of SimulationStatusEnum
  """
  deleteSimulationStatusEnum(id: ID!): SimulationStatusEnum

  """
  Autogenerated mutation for deleting multiple instance of SimulationStatusEnum
  """
  deleteSimulationStatusEnums(ids: [ID!]): [SimulationStatusEnum!]!

  """
  Autogenerated mutation for adding single instance of ActionsReport
  """
  addActionsReport(input: AddActionsReportInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ActionsReport
  """
  addActionsReports(input: [AddActionsReportInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionsReport
  """
  updateActionsReport(input: UpdateActionsReportInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ActionsReport
  """
  updateActionsReports(input: [UpdateActionsReportInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionsReport
  """
  deleteActionsReport(id: ID!): ActionsReport

  """
  Autogenerated mutation for deleting multiple instance of ActionsReport
  """
  deleteActionsReports(ids: [ID!]): [ActionsReport!]!

  """
  Autogenerated mutation for adding single instance of FacilityLevel
  """
  addFacilityLevel(input: AddFacilityLevelInput!): ID

  """
  Autogenerated mutation for adding multiple instances of FacilityLevel
  """
  addFacilityLevels(input: [AddFacilityLevelInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of FacilityLevel
  """
  updateFacilityLevel(input: UpdateFacilityLevelInput!): ID

  """
  Autogenerated mutation for updating multiple instance of FacilityLevel
  """
  updateFacilityLevels(input: [UpdateFacilityLevelInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of FacilityLevel
  """
  deleteFacilityLevel(id: ID!): FacilityLevel

  """
  Autogenerated mutation for deleting multiple instance of FacilityLevel
  """
  deleteFacilityLevels(ids: [ID!]): [FacilityLevel!]!

  """
  Autogenerated mutation for adding single instance of Path
  """
  addPath(input: AddPathInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Path
  """
  addPaths(input: [AddPathInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Path
  """
  updatePath(input: UpdatePathInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Path
  """
  updatePaths(input: [UpdatePathInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Path
  """
  deletePath(id: ID!): Path

  """
  Autogenerated mutation for deleting multiple instance of Path
  """
  deletePaths(ids: [ID!]): [Path!]!

  """
  Autogenerated mutation for adding single instance of Vehicle
  """
  addVehicle(input: AddVehicleInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Vehicle
  """
  addVehicles(input: [AddVehicleInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Vehicle
  """
  updateVehicle(input: UpdateVehicleInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Vehicle
  """
  updateVehicles(input: [UpdateVehicleInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Vehicle
  """
  deleteVehicle(id: ID!): Vehicle

  """
  Autogenerated mutation for deleting multiple instance of Vehicle
  """
  deleteVehicles(ids: [ID!]): [Vehicle!]!

  """
  Autogenerated mutation for adding single instance of City
  """
  addCity(input: AddCityInput!): ID

  """
  Autogenerated mutation for adding multiple instances of City
  """
  addCitys(input: [AddCityInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of City
  """
  updateCity(input: UpdateCityInput!): ID

  """
  Autogenerated mutation for updating multiple instance of City
  """
  updateCitys(input: [UpdateCityInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of City
  """
  deleteCity(id: ID!): City

  """
  Autogenerated mutation for deleting multiple instance of City
  """
  deleteCitys(ids: [ID!]): [City!]!

  """
  Autogenerated mutation for adding single instance of ProductTypeEnum
  """
  addProductTypeEnum(input: AddProductTypeEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ProductTypeEnum
  """
  addProductTypeEnums(input: [AddProductTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ProductTypeEnum
  """
  updateProductTypeEnum(input: UpdateProductTypeEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ProductTypeEnum
  """
  updateProductTypeEnums(input: [UpdateProductTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ProductTypeEnum
  """
  deleteProductTypeEnum(id: ID!): ProductTypeEnum

  """
  Autogenerated mutation for deleting multiple instance of ProductTypeEnum
  """
  deleteProductTypeEnums(ids: [ID!]): [ProductTypeEnum!]!

  """
  Autogenerated mutation for adding single instance of Facility
  """
  addFacility(input: AddFacilityInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Facility
  """
  addFacilitys(input: [AddFacilityInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Facility
  """
  updateFacility(input: UpdateFacilityInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Facility
  """
  updateFacilitys(input: [UpdateFacilityInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Facility
  """
  deleteFacility(id: ID!): Facility

  """
  Autogenerated mutation for deleting multiple instance of Facility
  """
  deleteFacilitys(ids: [ID!]): [Facility!]!

  """
  Autogenerated mutation for adding single instance of VehicleTypeEnum
  """
  addVehicleTypeEnum(input: AddVehicleTypeEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of VehicleTypeEnum
  """
  addVehicleTypeEnums(input: [AddVehicleTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of VehicleTypeEnum
  """
  updateVehicleTypeEnum(input: UpdateVehicleTypeEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of VehicleTypeEnum
  """
  updateVehicleTypeEnums(input: [UpdateVehicleTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of VehicleTypeEnum
  """
  deleteVehicleTypeEnum(id: ID!): VehicleTypeEnum

  """
  Autogenerated mutation for deleting multiple instance of VehicleTypeEnum
  """
  deleteVehicleTypeEnums(ids: [ID!]): [VehicleTypeEnum!]!

  """
  Autogenerated mutation for adding single instance of CompanyReport
  """
  addCompanyReport(input: AddCompanyReportInput!): ID

  """
  Autogenerated mutation for adding multiple instances of CompanyReport
  """
  addCompanyReports(input: [AddCompanyReportInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of CompanyReport
  """
  updateCompanyReport(input: UpdateCompanyReportInput!): ID

  """
  Autogenerated mutation for updating multiple instance of CompanyReport
  """
  updateCompanyReports(input: [UpdateCompanyReportInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of CompanyReport
  """
  deleteCompanyReport(id: ID!): CompanyReport

  """
  Autogenerated mutation for deleting multiple instance of CompanyReport
  """
  deleteCompanyReports(ids: [ID!]): [CompanyReport!]!

  """
  Autogenerated mutation for adding single instance of Company
  """
  addCompany(input: AddCompanyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Company
  """
  addCompanys(input: [AddCompanyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Company
  """
  updateCompany(input: UpdateCompanyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Company
  """
  updateCompanys(input: [UpdateCompanyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Company
  """
  deleteCompany(id: ID!): Company

  """
  Autogenerated mutation for deleting multiple instance of Company
  """
  deleteCompanys(ids: [ID!]): [Company!]!

  """
  Autogenerated mutation for adding single instance of ProducerLevel
  """
  addProducerLevel(input: AddProducerLevelInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ProducerLevel
  """
  addProducerLevels(input: [AddProducerLevelInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ProducerLevel
  """
  updateProducerLevel(input: UpdateProducerLevelInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ProducerLevel
  """
  updateProducerLevels(input: [UpdateProducerLevelInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ProducerLevel
  """
  deleteProducerLevel(id: ID!): ProducerLevel

  """
  Autogenerated mutation for deleting multiple instance of ProducerLevel
  """
  deleteProducerLevels(ids: [ID!]): [ProducerLevel!]!

  """
  Autogenerated mutation for adding single instance of ResearchStatusEnum
  """
  addResearchStatusEnum(input: AddResearchStatusEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ResearchStatusEnum
  """
  addResearchStatusEnums(input: [AddResearchStatusEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ResearchStatusEnum
  """
  updateResearchStatusEnum(input: UpdateResearchStatusEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ResearchStatusEnum
  """
  updateResearchStatusEnums(input: [UpdateResearchStatusEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ResearchStatusEnum
  """
  deleteResearchStatusEnum(id: ID!): ResearchStatusEnum

  """
  Autogenerated mutation for deleting multiple instance of ResearchStatusEnum
  """
  deleteResearchStatusEnums(ids: [ID!]): [ResearchStatusEnum!]!

  """
  Autogenerated mutation for adding single instance of Map
  """
  addMap(input: AddMapInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Map
  """
  addMaps(input: [AddMapInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Map
  """
  updateMap(input: UpdateMapInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Map
  """
  updateMaps(input: [UpdateMapInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Map
  """
  deleteMap(id: ID!): Map

  """
  Autogenerated mutation for deleting multiple instance of Map
  """
  deleteMaps(ids: [ID!]): [Map!]!

  """
  Autogenerated mutation for adding single instance of VehicleLevel
  """
  addVehicleLevel(input: AddVehicleLevelInput!): ID

  """
  Autogenerated mutation for adding multiple instances of VehicleLevel
  """
  addVehicleLevels(input: [AddVehicleLevelInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of VehicleLevel
  """
  updateVehicleLevel(input: UpdateVehicleLevelInput!): ID

  """
  Autogenerated mutation for updating multiple instance of VehicleLevel
  """
  updateVehicleLevels(input: [UpdateVehicleLevelInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of VehicleLevel
  """
  deleteVehicleLevel(id: ID!): VehicleLevel

  """
  Autogenerated mutation for deleting multiple instance of VehicleLevel
  """
  deleteVehicleLevels(ids: [ID!]): [VehicleLevel!]!

  """
  Autogenerated mutation for adding single instance of TileTypeEnum
  """
  addTileTypeEnum(input: AddTileTypeEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of TileTypeEnum
  """
  addTileTypeEnums(input: [AddTileTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of TileTypeEnum
  """
  updateTileTypeEnum(input: UpdateTileTypeEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of TileTypeEnum
  """
  updateTileTypeEnums(input: [UpdateTileTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of TileTypeEnum
  """
  deleteTileTypeEnum(id: ID!): TileTypeEnum

  """
  Autogenerated mutation for deleting multiple instance of TileTypeEnum
  """
  deleteTileTypeEnums(ids: [ID!]): [TileTypeEnum!]!

  """
  Autogenerated mutation for adding single instance of Simulation
  """
  addSimulation(input: AddSimulationInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Simulation
  """
  addSimulations(input: [AddSimulationInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Simulation
  """
  updateSimulation(input: UpdateSimulationInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Simulation
  """
  updateSimulations(input: [UpdateSimulationInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Simulation
  """
  deleteSimulation(id: ID!): Simulation

  """
  Autogenerated mutation for deleting multiple instance of Simulation
  """
  deleteSimulations(ids: [ID!]): [Simulation!]!

  """
  Autogenerated mutation for adding single instance of SimulationStepResult
  """
  addSimulationStepResult(input: AddSimulationStepResultInput!): ID

  """
  Autogenerated mutation for adding multiple instances of SimulationStepResult
  """
  addSimulationStepResults(input: [AddSimulationStepResultInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of SimulationStepResult
  """
  updateSimulationStepResult(input: UpdateSimulationStepResultInput!): ID

  """
  Autogenerated mutation for updating multiple instance of SimulationStepResult
  """
  updateSimulationStepResults(input: [UpdateSimulationStepResultInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of SimulationStepResult
  """
  deleteSimulationStepResult(id: ID!): SimulationStepResult

  """
  Autogenerated mutation for deleting multiple instance of SimulationStepResult
  """
  deleteSimulationStepResults(ids: [ID!]): [SimulationStepResult!]!

  """
  Autogenerated mutation for adding single instance of SimulationConfig
  """
  addSimulationConfig(input: AddSimulationConfigInput!): ID

  """
  Autogenerated mutation for adding multiple instances of SimulationConfig
  """
  addSimulationConfigs(input: [AddSimulationConfigInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of SimulationConfig
  """
  updateSimulationConfig(input: UpdateSimulationConfigInput!): ID

  """
  Autogenerated mutation for updating multiple instance of SimulationConfig
  """
  updateSimulationConfigs(input: [UpdateSimulationConfigInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of SimulationConfig
  """
  deleteSimulationConfig(id: ID!): SimulationConfig

  """
  Autogenerated mutation for deleting multiple instance of SimulationConfig
  """
  deleteSimulationConfigs(ids: [ID!]): [SimulationConfig!]!

  """
  Autogenerated mutation for adding single instance of Producer
  """
  addProducer(input: AddProducerInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Producer
  """
  addProducers(input: [AddProducerInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Producer
  """
  updateProducer(input: UpdateProducerInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Producer
  """
  updateProducers(input: [UpdateProducerInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Producer
  """
  deleteProducer(id: ID!): Producer

  """
  Autogenerated mutation for deleting multiple instance of Producer
  """
  deleteProducers(ids: [ID!]): [Producer!]!

  """
  Autogenerated mutation for adding single instance of FacilityTypeEnum
  """
  addFacilityTypeEnum(input: AddFacilityTypeEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of FacilityTypeEnum
  """
  addFacilityTypeEnums(input: [AddFacilityTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of FacilityTypeEnum
  """
  updateFacilityTypeEnum(input: UpdateFacilityTypeEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of FacilityTypeEnum
  """
  updateFacilityTypeEnums(input: [UpdateFacilityTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of FacilityTypeEnum
  """
  deleteFacilityTypeEnum(id: ID!): FacilityTypeEnum

  """
  Autogenerated mutation for deleting multiple instance of FacilityTypeEnum
  """
  deleteFacilityTypeEnums(ids: [ID!]): [FacilityTypeEnum!]!

  """
  Autogenerated mutation for adding single instance of CityConfig
  """
  addCityConfig(input: AddCityConfigInput!): ID

  """
  Autogenerated mutation for adding multiple instances of CityConfig
  """
  addCityConfigs(input: [AddCityConfigInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of CityConfig
  """
  updateCityConfig(input: UpdateCityConfigInput!): ID

  """
  Autogenerated mutation for updating multiple instance of CityConfig
  """
  updateCityConfigs(input: [UpdateCityConfigInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of CityConfig
  """
  deleteCityConfig(id: ID!): CityConfig

  """
  Autogenerated mutation for deleting multiple instance of CityConfig
  """
  deleteCityConfigs(ids: [ID!]): [CityConfig!]!

  """
  Autogenerated mutation for adding single instance of PathTypeEnum
  """
  addPathTypeEnum(input: AddPathTypeEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of PathTypeEnum
  """
  addPathTypeEnums(input: [AddPathTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of PathTypeEnum
  """
  updatePathTypeEnum(input: UpdatePathTypeEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of PathTypeEnum
  """
  updatePathTypeEnums(input: [UpdatePathTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of PathTypeEnum
  """
  deletePathTypeEnum(id: ID!): PathTypeEnum

  """
  Autogenerated mutation for deleting multiple instance of PathTypeEnum
  """
  deletePathTypeEnums(ids: [ID!]): [PathTypeEnum!]!

  """
  Autogenerated mutation for adding single instance of OrderedLocation
  """
  addOrderedLocation(input: AddOrderedLocationInput!): ID

  """
  Autogenerated mutation for adding multiple instances of OrderedLocation
  """
  addOrderedLocations(input: [AddOrderedLocationInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of OrderedLocation
  """
  updateOrderedLocation(input: UpdateOrderedLocationInput!): ID

  """
  Autogenerated mutation for updating multiple instance of OrderedLocation
  """
  updateOrderedLocations(input: [UpdateOrderedLocationInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of OrderedLocation
  """
  deleteOrderedLocation(id: ID!): OrderedLocation

  """
  Autogenerated mutation for deleting multiple instance of OrderedLocation
  """
  deleteOrderedLocations(ids: [ID!]): [OrderedLocation!]!

  """
  Autogenerated mutation for adding single instance of ActionTypeEnum
  """
  addActionTypeEnum(input: AddActionTypeEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ActionTypeEnum
  """
  addActionTypeEnums(input: [AddActionTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionTypeEnum
  """
  updateActionTypeEnum(input: UpdateActionTypeEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ActionTypeEnum
  """
  updateActionTypeEnums(input: [UpdateActionTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionTypeEnum
  """
  deleteActionTypeEnum(id: ID!): ActionTypeEnum

  """
  Autogenerated mutation for deleting multiple instance of ActionTypeEnum
  """
  deleteActionTypeEnums(ids: [ID!]): [ActionTypeEnum!]!

  """
  Autogenerated mutation for adding single instance of Consumable
  """
  addConsumable(input: AddConsumableInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Consumable
  """
  addConsumables(input: [AddConsumableInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Consumable
  """
  updateConsumable(input: UpdateConsumableInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Consumable
  """
  updateConsumables(input: [UpdateConsumableInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Consumable
  """
  deleteConsumable(id: ID!): Consumable

  """
  Autogenerated mutation for deleting multiple instance of Consumable
  """
  deleteConsumables(ids: [ID!]): [Consumable!]!

  """
  Autogenerated mutation for adding single instance of CityLevel
  """
  addCityLevel(input: AddCityLevelInput!): ID

  """
  Autogenerated mutation for adding multiple instances of CityLevel
  """
  addCityLevels(input: [AddCityLevelInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of CityLevel
  """
  updateCityLevel(input: UpdateCityLevelInput!): ID

  """
  Autogenerated mutation for updating multiple instance of CityLevel
  """
  updateCityLevels(input: [UpdateCityLevelInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of CityLevel
  """
  deleteCityLevel(id: ID!): CityLevel

  """
  Autogenerated mutation for deleting multiple instance of CityLevel
  """
  deleteCityLevels(ids: [ID!]): [CityLevel!]!

  """
  Autogenerated mutation for adding single instance of ActionTypeRequirement
  """
  addActionTypeRequirement(input: AddActionTypeRequirementInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ActionTypeRequirement
  """
  addActionTypeRequirements(input: [AddActionTypeRequirementInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionTypeRequirement
  """
  updateActionTypeRequirement(input: UpdateActionTypeRequirementInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ActionTypeRequirement
  """
  updateActionTypeRequirements(
    input: [UpdateActionTypeRequirementInput]!
  ): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionTypeRequirement
  """
  deleteActionTypeRequirement(id: ID!): ActionTypeRequirement

  """
  Autogenerated mutation for deleting multiple instance of ActionTypeRequirement
  """
  deleteActionTypeRequirements(ids: [ID!]): [ActionTypeRequirement!]!

  """
  Autogenerated mutation for adding single instance of Order
  """
  addOrder(input: AddOrderInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Order
  """
  addOrders(input: [AddOrderInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Order
  """
  updateOrder(input: UpdateOrderInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Order
  """
  updateOrders(input: [UpdateOrderInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Order
  """
  deleteOrder(id: ID!): Order

  """
  Autogenerated mutation for deleting multiple instance of Order
  """
  deleteOrders(ids: [ID!]): [Order!]!

  """
  Autogenerated mutation for adding single instance of ActionProgressInputProxy
  """
  addActionProgressInputProxy(input: AddActionProgressInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ActionProgressInputProxy
  """
  addActionProgressInputProxys(
    input: [AddActionProgressInputProxyInput]!
  ): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionProgressInputProxy
  """
  updateActionProgressInputProxy(
    input: UpdateActionProgressInputProxyInput!
  ): ID

  """
  Autogenerated mutation for updating multiple instance of ActionProgressInputProxy
  """
  updateActionProgressInputProxys(
    input: [UpdateActionProgressInputProxyInput]!
  ): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionProgressInputProxy
  """
  deleteActionProgressInputProxy(id: ID!): ActionProgressInputProxy

  """
  Autogenerated mutation for deleting multiple instance of ActionProgressInputProxy
  """
  deleteActionProgressInputProxys(ids: [ID!]): [ActionProgressInputProxy!]!

  """
  Autogenerated mutation for adding single instance of PathConfig
  """
  addPathConfig(input: AddPathConfigInput!): ID

  """
  Autogenerated mutation for adding multiple instances of PathConfig
  """
  addPathConfigs(input: [AddPathConfigInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of PathConfig
  """
  updatePathConfig(input: UpdatePathConfigInput!): ID

  """
  Autogenerated mutation for updating multiple instance of PathConfig
  """
  updatePathConfigs(input: [UpdatePathConfigInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of PathConfig
  """
  deletePathConfig(id: ID!): PathConfig

  """
  Autogenerated mutation for deleting multiple instance of PathConfig
  """
  deletePathConfigs(ids: [ID!]): [PathConfig!]!

  """
  Autogenerated mutation for adding single instance of ActionStatusEnum
  """
  addActionStatusEnum(input: AddActionStatusEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ActionStatusEnum
  """
  addActionStatusEnums(input: [AddActionStatusEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionStatusEnum
  """
  updateActionStatusEnum(input: UpdateActionStatusEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ActionStatusEnum
  """
  updateActionStatusEnums(input: [UpdateActionStatusEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionStatusEnum
  """
  deleteActionStatusEnum(id: ID!): ActionStatusEnum

  """
  Autogenerated mutation for deleting multiple instance of ActionStatusEnum
  """
  deleteActionStatusEnums(ids: [ID!]): [ActionStatusEnum!]!

  """
  Autogenerated mutation for adding single instance of CounterpartyUnion
  """
  addCounterpartyUnion(input: AddCounterpartyUnionInput!): ID

  """
  Autogenerated mutation for adding multiple instances of CounterpartyUnion
  """
  addCounterpartyUnions(input: [AddCounterpartyUnionInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of CounterpartyUnion
  """
  updateCounterpartyUnion(input: UpdateCounterpartyUnionInput!): ID

  """
  Autogenerated mutation for updating multiple instance of CounterpartyUnion
  """
  updateCounterpartyUnions(input: [UpdateCounterpartyUnionInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of CounterpartyUnion
  """
  deleteCounterpartyUnion(id: ID!): CounterpartyUnion

  """
  Autogenerated mutation for deleting multiple instance of CounterpartyUnion
  """
  deleteCounterpartyUnions(ids: [ID!]): [CounterpartyUnion!]!

  """
  Autogenerated mutation for adding single instance of MapArea
  """
  addMapArea(input: AddMapAreaInput!): ID

  """
  Autogenerated mutation for adding multiple instances of MapArea
  """
  addMapAreas(input: [AddMapAreaInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of MapArea
  """
  updateMapArea(input: UpdateMapAreaInput!): ID

  """
  Autogenerated mutation for updating multiple instance of MapArea
  """
  updateMapAreas(input: [UpdateMapAreaInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of MapArea
  """
  deleteMapArea(id: ID!): MapArea

  """
  Autogenerated mutation for deleting multiple instance of MapArea
  """
  deleteMapAreas(ids: [ID!]): [MapArea!]!

  """
  Autogenerated mutation for adding single instance of StorageAmount
  """
  addStorageAmount(input: AddStorageAmountInput!): ID

  """
  Autogenerated mutation for adding multiple instances of StorageAmount
  """
  addStorageAmounts(input: [AddStorageAmountInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of StorageAmount
  """
  updateStorageAmount(input: UpdateStorageAmountInput!): ID

  """
  Autogenerated mutation for updating multiple instance of StorageAmount
  """
  updateStorageAmounts(input: [UpdateStorageAmountInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of StorageAmount
  """
  deleteStorageAmount(id: ID!): StorageAmount

  """
  Autogenerated mutation for deleting multiple instance of StorageAmount
  """
  deleteStorageAmounts(ids: [ID!]): [StorageAmount!]!

  """
  Autogenerated mutation for adding single instance of OrderTypeEnum
  """
  addOrderTypeEnum(input: AddOrderTypeEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of OrderTypeEnum
  """
  addOrderTypeEnums(input: [AddOrderTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of OrderTypeEnum
  """
  updateOrderTypeEnum(input: UpdateOrderTypeEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of OrderTypeEnum
  """
  updateOrderTypeEnums(input: [UpdateOrderTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of OrderTypeEnum
  """
  deleteOrderTypeEnum(id: ID!): OrderTypeEnum

  """
  Autogenerated mutation for deleting multiple instance of OrderTypeEnum
  """
  deleteOrderTypeEnums(ids: [ID!]): [OrderTypeEnum!]!

  """
  Autogenerated mutation for adding single instance of StorageTransaction
  """
  addStorageTransaction(input: AddStorageTransactionInput!): ID

  """
  Autogenerated mutation for adding multiple instances of StorageTransaction
  """
  addStorageTransactions(input: [AddStorageTransactionInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of StorageTransaction
  """
  updateStorageTransaction(input: UpdateStorageTransactionInput!): ID

  """
  Autogenerated mutation for updating multiple instance of StorageTransaction
  """
  updateStorageTransactions(input: [UpdateStorageTransactionInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of StorageTransaction
  """
  deleteStorageTransaction(id: ID!): StorageTransaction

  """
  Autogenerated mutation for deleting multiple instance of StorageTransaction
  """
  deleteStorageTransactions(ids: [ID!]): [StorageTransaction!]!

  """
  Autogenerated mutation for adding single instance of ActionObjectUnion
  """
  addActionObjectUnion(input: AddActionObjectUnionInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ActionObjectUnion
  """
  addActionObjectUnions(input: [AddActionObjectUnionInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionObjectUnion
  """
  updateActionObjectUnion(input: UpdateActionObjectUnionInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ActionObjectUnion
  """
  updateActionObjectUnions(input: [UpdateActionObjectUnionInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionObjectUnion
  """
  deleteActionObjectUnion(id: ID!): ActionObjectUnion

  """
  Autogenerated mutation for deleting multiple instance of ActionObjectUnion
  """
  deleteActionObjectUnions(ids: [ID!]): [ActionObjectUnion!]!

  """
  Autogenerated mutation for adding single instance of FieldFilterInputProxy
  """
  addFieldFilterInputProxy(input: AddFieldFilterInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of FieldFilterInputProxy
  """
  addFieldFilterInputProxys(input: [AddFieldFilterInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of FieldFilterInputProxy
  """
  updateFieldFilterInputProxy(input: UpdateFieldFilterInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of FieldFilterInputProxy
  """
  updateFieldFilterInputProxys(
    input: [UpdateFieldFilterInputProxyInput]!
  ): [ID!]!

  """
  Autogenerated mutation for deleting single instance of FieldFilterInputProxy
  """
  deleteFieldFilterInputProxy(id: ID!): FieldFilterInputProxy

  """
  Autogenerated mutation for deleting multiple instance of FieldFilterInputProxy
  """
  deleteFieldFilterInputProxys(ids: [ID!]): [FieldFilterInputProxy!]!

  """
  Autogenerated mutation for adding single instance of CompanyConfig
  """
  addCompanyConfig(input: AddCompanyConfigInput!): ID

  """
  Autogenerated mutation for adding multiple instances of CompanyConfig
  """
  addCompanyConfigs(input: [AddCompanyConfigInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of CompanyConfig
  """
  updateCompanyConfig(input: UpdateCompanyConfigInput!): ID

  """
  Autogenerated mutation for updating multiple instance of CompanyConfig
  """
  updateCompanyConfigs(input: [UpdateCompanyConfigInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of CompanyConfig
  """
  deleteCompanyConfig(id: ID!): CompanyConfig

  """
  Autogenerated mutation for deleting multiple instance of CompanyConfig
  """
  deleteCompanyConfigs(ids: [ID!]): [CompanyConfig!]!

  """
  Autogenerated mutation for adding single instance of StorageTransactionReport
  """
  addStorageTransactionReport(input: AddStorageTransactionReportInput!): ID

  """
  Autogenerated mutation for adding multiple instances of StorageTransactionReport
  """
  addStorageTransactionReports(
    input: [AddStorageTransactionReportInput]!
  ): [ID!]!

  """
  Autogenerated mutation for updating single instance of StorageTransactionReport
  """
  updateStorageTransactionReport(
    input: UpdateStorageTransactionReportInput!
  ): ID

  """
  Autogenerated mutation for updating multiple instance of StorageTransactionReport
  """
  updateStorageTransactionReports(
    input: [UpdateStorageTransactionReportInput]!
  ): [ID!]!

  """
  Autogenerated mutation for deleting single instance of StorageTransactionReport
  """
  deleteStorageTransactionReport(id: ID!): StorageTransactionReport

  """
  Autogenerated mutation for deleting multiple instance of StorageTransactionReport
  """
  deleteStorageTransactionReports(ids: [ID!]): [StorageTransactionReport!]!

  """
  Autogenerated mutation for adding single instance of SupplyDepot
  """
  addSupplyDepot(input: AddSupplyDepotInput!): ID

  """
  Autogenerated mutation for adding multiple instances of SupplyDepot
  """
  addSupplyDepots(input: [AddSupplyDepotInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of SupplyDepot
  """
  updateSupplyDepot(input: UpdateSupplyDepotInput!): ID

  """
  Autogenerated mutation for updating multiple instance of SupplyDepot
  """
  updateSupplyDepots(input: [UpdateSupplyDepotInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of SupplyDepot
  """
  deleteSupplyDepot(id: ID!): SupplyDepot

  """
  Autogenerated mutation for deleting multiple instance of SupplyDepot
  """
  deleteSupplyDepots(ids: [ID!]): [SupplyDepot!]!

  """
  Autogenerated mutation for adding single instance of SupplyDepotLevel
  """
  addSupplyDepotLevel(input: AddSupplyDepotLevelInput!): ID

  """
  Autogenerated mutation for adding multiple instances of SupplyDepotLevel
  """
  addSupplyDepotLevels(input: [AddSupplyDepotLevelInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of SupplyDepotLevel
  """
  updateSupplyDepotLevel(input: UpdateSupplyDepotLevelInput!): ID

  """
  Autogenerated mutation for updating multiple instance of SupplyDepotLevel
  """
  updateSupplyDepotLevels(input: [UpdateSupplyDepotLevelInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of SupplyDepotLevel
  """
  deleteSupplyDepotLevel(id: ID!): SupplyDepotLevel

  """
  Autogenerated mutation for deleting multiple instance of SupplyDepotLevel
  """
  deleteSupplyDepotLevels(ids: [ID!]): [SupplyDepotLevel!]!

  """
  Autogenerated mutation for adding single instance of StorageInputProxy
  """
  addStorageInputProxy(input: AddStorageInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of StorageInputProxy
  """
  addStorageInputProxys(input: [AddStorageInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of StorageInputProxy
  """
  updateStorageInputProxy(input: UpdateStorageInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of StorageInputProxy
  """
  updateStorageInputProxys(input: [UpdateStorageInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of StorageInputProxy
  """
  deleteStorageInputProxy(id: ID!): StorageInputProxy

  """
  Autogenerated mutation for deleting multiple instance of StorageInputProxy
  """
  deleteStorageInputProxys(ids: [ID!]): [StorageInputProxy!]!

  """
  Autogenerated mutation for adding single instance of ProductionReport
  """
  addProductionReport(input: AddProductionReportInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ProductionReport
  """
  addProductionReports(input: [AddProductionReportInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ProductionReport
  """
  updateProductionReport(input: UpdateProductionReportInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ProductionReport
  """
  updateProductionReports(input: [UpdateProductionReportInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ProductionReport
  """
  deleteProductionReport(id: ID!): ProductionReport

  """
  Autogenerated mutation for deleting multiple instance of ProductionReport
  """
  deleteProductionReports(ids: [ID!]): [ProductionReport!]!

  """
  Autogenerated mutation for adding single instance of CitiesReport
  """
  addCitiesReport(input: AddCitiesReportInput!): ID

  """
  Autogenerated mutation for adding multiple instances of CitiesReport
  """
  addCitiesReports(input: [AddCitiesReportInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of CitiesReport
  """
  updateCitiesReport(input: UpdateCitiesReportInput!): ID

  """
  Autogenerated mutation for updating multiple instance of CitiesReport
  """
  updateCitiesReports(input: [UpdateCitiesReportInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of CitiesReport
  """
  deleteCitiesReport(id: ID!): CitiesReport

  """
  Autogenerated mutation for deleting multiple instance of CitiesReport
  """
  deleteCitiesReports(ids: [ID!]): [CitiesReport!]!

  """
  Autogenerated mutation for adding single instance of CompanyInputProxy
  """
  addCompanyInputProxy(input: AddCompanyInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of CompanyInputProxy
  """
  addCompanyInputProxys(input: [AddCompanyInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of CompanyInputProxy
  """
  updateCompanyInputProxy(input: UpdateCompanyInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of CompanyInputProxy
  """
  updateCompanyInputProxys(input: [UpdateCompanyInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of CompanyInputProxy
  """
  deleteCompanyInputProxy(id: ID!): CompanyInputProxy

  """
  Autogenerated mutation for deleting multiple instance of CompanyInputProxy
  """
  deleteCompanyInputProxys(ids: [ID!]): [CompanyInputProxy!]!

  """
  Autogenerated mutation for adding single instance of MapConfig
  """
  addMapConfig(input: AddMapConfigInput!): ID

  """
  Autogenerated mutation for adding multiple instances of MapConfig
  """
  addMapConfigs(input: [AddMapConfigInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of MapConfig
  """
  updateMapConfig(input: UpdateMapConfigInput!): ID

  """
  Autogenerated mutation for updating multiple instance of MapConfig
  """
  updateMapConfigs(input: [UpdateMapConfigInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of MapConfig
  """
  deleteMapConfig(id: ID!): MapConfig

  """
  Autogenerated mutation for deleting multiple instance of MapConfig
  """
  deleteMapConfigs(ids: [ID!]): [MapConfig!]!

  """
  Autogenerated mutation for adding single instance of Storage
  """
  addStorage(input: AddStorageInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Storage
  """
  addStorages(input: [AddStorageInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Storage
  """
  updateStorage(input: UpdateStorageInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Storage
  """
  updateStorages(input: [UpdateStorageInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Storage
  """
  deleteStorage(id: ID!): Storage

  """
  Autogenerated mutation for deleting multiple instance of Storage
  """
  deleteStorages(ids: [ID!]): [Storage!]!

  """
  Autogenerated mutation for adding single instance of MapLoadConfig
  """
  addMapLoadConfig(input: AddMapLoadConfigInput!): ID

  """
  Autogenerated mutation for adding multiple instances of MapLoadConfig
  """
  addMapLoadConfigs(input: [AddMapLoadConfigInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of MapLoadConfig
  """
  updateMapLoadConfig(input: UpdateMapLoadConfigInput!): ID

  """
  Autogenerated mutation for updating multiple instance of MapLoadConfig
  """
  updateMapLoadConfigs(input: [UpdateMapLoadConfigInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of MapLoadConfig
  """
  deleteMapLoadConfig(id: ID!): MapLoadConfig

  """
  Autogenerated mutation for deleting multiple instance of MapLoadConfig
  """
  deleteMapLoadConfigs(ids: [ID!]): [MapLoadConfig!]!

  """
  Autogenerated mutation for adding single instance of MapGenerationConfig
  """
  addMapGenerationConfig(input: AddMapGenerationConfigInput!): ID

  """
  Autogenerated mutation for adding multiple instances of MapGenerationConfig
  """
  addMapGenerationConfigs(input: [AddMapGenerationConfigInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of MapGenerationConfig
  """
  updateMapGenerationConfig(input: UpdateMapGenerationConfigInput!): ID

  """
  Autogenerated mutation for updating multiple instance of MapGenerationConfig
  """
  updateMapGenerationConfigs(input: [UpdateMapGenerationConfigInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of MapGenerationConfig
  """
  deleteMapGenerationConfig(id: ID!): MapGenerationConfig

  """
  Autogenerated mutation for deleting multiple instance of MapGenerationConfig
  """
  deleteMapGenerationConfigs(ids: [ID!]): [MapGenerationConfig!]!

  """
  Autogenerated mutation for adding single instance of SupplyDepotInputProxy
  """
  addSupplyDepotInputProxy(input: AddSupplyDepotInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of SupplyDepotInputProxy
  """
  addSupplyDepotInputProxys(input: [AddSupplyDepotInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of SupplyDepotInputProxy
  """
  updateSupplyDepotInputProxy(input: UpdateSupplyDepotInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of SupplyDepotInputProxy
  """
  updateSupplyDepotInputProxys(
    input: [UpdateSupplyDepotInputProxyInput]!
  ): [ID!]!

  """
  Autogenerated mutation for deleting single instance of SupplyDepotInputProxy
  """
  deleteSupplyDepotInputProxy(id: ID!): SupplyDepotInputProxy

  """
  Autogenerated mutation for deleting multiple instance of SupplyDepotInputProxy
  """
  deleteSupplyDepotInputProxys(ids: [ID!]): [SupplyDepotInputProxy!]!

  """
  Autogenerated mutation for adding single instance of VehiclePathCompatibility
  """
  addVehiclePathCompatibility(input: AddVehiclePathCompatibilityInput!): ID

  """
  Autogenerated mutation for adding multiple instances of VehiclePathCompatibility
  """
  addVehiclePathCompatibilitys(
    input: [AddVehiclePathCompatibilityInput]!
  ): [ID!]!

  """
  Autogenerated mutation for updating single instance of VehiclePathCompatibility
  """
  updateVehiclePathCompatibility(
    input: UpdateVehiclePathCompatibilityInput!
  ): ID

  """
  Autogenerated mutation for updating multiple instance of VehiclePathCompatibility
  """
  updateVehiclePathCompatibilitys(
    input: [UpdateVehiclePathCompatibilityInput]!
  ): [ID!]!

  """
  Autogenerated mutation for deleting single instance of VehiclePathCompatibility
  """
  deleteVehiclePathCompatibility(id: ID!): VehiclePathCompatibility

  """
  Autogenerated mutation for deleting multiple instance of VehiclePathCompatibility
  """
  deleteVehiclePathCompatibilitys(ids: [ID!]): [VehiclePathCompatibility!]!

  """
  Autogenerated mutation for adding single instance of SimulationInputProxy
  """
  addSimulationInputProxy(input: AddSimulationInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of SimulationInputProxy
  """
  addSimulationInputProxys(input: [AddSimulationInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of SimulationInputProxy
  """
  updateSimulationInputProxy(input: UpdateSimulationInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of SimulationInputProxy
  """
  updateSimulationInputProxys(input: [UpdateSimulationInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of SimulationInputProxy
  """
  deleteSimulationInputProxy(id: ID!): SimulationInputProxy

  """
  Autogenerated mutation for deleting multiple instance of SimulationInputProxy
  """
  deleteSimulationInputProxys(ids: [ID!]): [SimulationInputProxy!]!

  """
  Autogenerated mutation for adding single instance of ActionInputProxy
  """
  addActionInputProxy(input: AddActionInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ActionInputProxy
  """
  addActionInputProxys(input: [AddActionInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionInputProxy
  """
  updateActionInputProxy(input: UpdateActionInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ActionInputProxy
  """
  updateActionInputProxys(input: [UpdateActionInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionInputProxy
  """
  deleteActionInputProxy(id: ID!): ActionInputProxy

  """
  Autogenerated mutation for deleting multiple instance of ActionInputProxy
  """
  deleteActionInputProxys(ids: [ID!]): [ActionInputProxy!]!

  """
  Autogenerated mutation for adding single instance of FinancialReport
  """
  addFinancialReport(input: AddFinancialReportInput!): ID

  """
  Autogenerated mutation for adding multiple instances of FinancialReport
  """
  addFinancialReports(input: [AddFinancialReportInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of FinancialReport
  """
  updateFinancialReport(input: UpdateFinancialReportInput!): ID

  """
  Autogenerated mutation for updating multiple instance of FinancialReport
  """
  updateFinancialReports(input: [UpdateFinancialReportInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of FinancialReport
  """
  deleteFinancialReport(id: ID!): FinancialReport

  """
  Autogenerated mutation for deleting multiple instance of FinancialReport
  """
  deleteFinancialReports(ids: [ID!]): [FinancialReport!]!

  """
  Autogenerated mutation for adding single instance of ActionObjectUnionInputProxy
  """
  addActionObjectUnionInputProxy(
    input: AddActionObjectUnionInputProxyInput!
  ): ID

  """
  Autogenerated mutation for adding multiple instances of ActionObjectUnionInputProxy
  """
  addActionObjectUnionInputProxys(
    input: [AddActionObjectUnionInputProxyInput]!
  ): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionObjectUnionInputProxy
  """
  updateActionObjectUnionInputProxy(
    input: UpdateActionObjectUnionInputProxyInput!
  ): ID

  """
  Autogenerated mutation for updating multiple instance of ActionObjectUnionInputProxy
  """
  updateActionObjectUnionInputProxys(
    input: [UpdateActionObjectUnionInputProxyInput]!
  ): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionObjectUnionInputProxy
  """
  deleteActionObjectUnionInputProxy(id: ID!): ActionObjectUnionInputProxy

  """
  Autogenerated mutation for deleting multiple instance of ActionObjectUnionInputProxy
  """
  deleteActionObjectUnionInputProxys(
    ids: [ID!]
  ): [ActionObjectUnionInputProxy!]!

  """
  Autogenerated mutation for adding single instance of SimObjects
  """
  addSimObjects(input: AddSimObjectsInput!): ID

  """
  Autogenerated mutation for adding multiple instances of SimObjects
  """
  addSimObjectss(input: [AddSimObjectsInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of SimObjects
  """
  updateSimObjects(input: UpdateSimObjectsInput!): ID

  """
  Autogenerated mutation for updating multiple instance of SimObjects
  """
  updateSimObjectss(input: [UpdateSimObjectsInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of SimObjects
  """
  deleteSimObjects(id: ID!): SimObjects

  """
  Autogenerated mutation for deleting multiple instance of SimObjects
  """
  deleteSimObjectss(ids: [ID!]): [SimObjects!]!

  """
  Autogenerated mutation for adding single instance of ProductQuantity
  """
  addProductQuantity(input: AddProductQuantityInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ProductQuantity
  """
  addProductQuantitys(input: [AddProductQuantityInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ProductQuantity
  """
  updateProductQuantity(input: UpdateProductQuantityInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ProductQuantity
  """
  updateProductQuantitys(input: [UpdateProductQuantityInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ProductQuantity
  """
  deleteProductQuantity(id: ID!): ProductQuantity

  """
  Autogenerated mutation for deleting multiple instance of ProductQuantity
  """
  deleteProductQuantitys(ids: [ID!]): [ProductQuantity!]!

  """
  Autogenerated mutation for adding single instance of ProducerInputProxy
  """
  addProducerInputProxy(input: AddProducerInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ProducerInputProxy
  """
  addProducerInputProxys(input: [AddProducerInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ProducerInputProxy
  """
  updateProducerInputProxy(input: UpdateProducerInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ProducerInputProxy
  """
  updateProducerInputProxys(input: [UpdateProducerInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ProducerInputProxy
  """
  deleteProducerInputProxy(id: ID!): ProducerInputProxy

  """
  Autogenerated mutation for deleting multiple instance of ProducerInputProxy
  """
  deleteProducerInputProxys(ids: [ID!]): [ProducerInputProxy!]!

  """
  Autogenerated mutation for adding single instance of CityInputProxy
  """
  addCityInputProxy(input: AddCityInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of CityInputProxy
  """
  addCityInputProxys(input: [AddCityInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of CityInputProxy
  """
  updateCityInputProxy(input: UpdateCityInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of CityInputProxy
  """
  updateCityInputProxys(input: [UpdateCityInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of CityInputProxy
  """
  deleteCityInputProxy(id: ID!): CityInputProxy

  """
  Autogenerated mutation for deleting multiple instance of CityInputProxy
  """
  deleteCityInputProxys(ids: [ID!]): [CityInputProxy!]!

  """
  Autogenerated mutation for adding single instance of ProducerTypeEnum
  """
  addProducerTypeEnum(input: AddProducerTypeEnumInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ProducerTypeEnum
  """
  addProducerTypeEnums(input: [AddProducerTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ProducerTypeEnum
  """
  updateProducerTypeEnum(input: UpdateProducerTypeEnumInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ProducerTypeEnum
  """
  updateProducerTypeEnums(input: [UpdateProducerTypeEnumInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ProducerTypeEnum
  """
  deleteProducerTypeEnum(id: ID!): ProducerTypeEnum

  """
  Autogenerated mutation for deleting multiple instance of ProducerTypeEnum
  """
  deleteProducerTypeEnums(ids: [ID!]): [ProducerTypeEnum!]!

  """
  Autogenerated mutation for adding single instance of PathInputProxy
  """
  addPathInputProxy(input: AddPathInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of PathInputProxy
  """
  addPathInputProxys(input: [AddPathInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of PathInputProxy
  """
  updatePathInputProxy(input: UpdatePathInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of PathInputProxy
  """
  updatePathInputProxys(input: [UpdatePathInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of PathInputProxy
  """
  deletePathInputProxy(id: ID!): PathInputProxy

  """
  Autogenerated mutation for deleting multiple instance of PathInputProxy
  """
  deletePathInputProxys(ids: [ID!]): [PathInputProxy!]!

  """
  Autogenerated mutation for adding single instance of ActionProgress
  """
  addActionProgress(input: AddActionProgressInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ActionProgress
  """
  addActionProgresss(input: [AddActionProgressInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ActionProgress
  """
  updateActionProgress(input: UpdateActionProgressInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ActionProgress
  """
  updateActionProgresss(input: [UpdateActionProgressInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ActionProgress
  """
  deleteActionProgress(id: ID!): ActionProgress

  """
  Autogenerated mutation for deleting multiple instance of ActionProgress
  """
  deleteActionProgresss(ids: [ID!]): [ActionProgress!]!

  """
  Autogenerated mutation for adding single instance of FacilityInputProxy
  """
  addFacilityInputProxy(input: AddFacilityInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of FacilityInputProxy
  """
  addFacilityInputProxys(input: [AddFacilityInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of FacilityInputProxy
  """
  updateFacilityInputProxy(input: UpdateFacilityInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of FacilityInputProxy
  """
  updateFacilityInputProxys(input: [UpdateFacilityInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of FacilityInputProxy
  """
  deleteFacilityInputProxy(id: ID!): FacilityInputProxy

  """
  Autogenerated mutation for deleting multiple instance of FacilityInputProxy
  """
  deleteFacilityInputProxys(ids: [ID!]): [FacilityInputProxy!]!

  """
  Autogenerated mutation for adding single instance of Tile
  """
  addTile(input: AddTileInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Tile
  """
  addTiles(input: [AddTileInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of Tile
  """
  updateTile(input: UpdateTileInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Tile
  """
  updateTiles(input: [UpdateTileInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of Tile
  """
  deleteTile(id: ID!): Tile

  """
  Autogenerated mutation for deleting multiple instance of Tile
  """
  deleteTiles(ids: [ID!]): [Tile!]!

  """
  Autogenerated mutation for adding single instance of VehicleInputProxy
  """
  addVehicleInputProxy(input: AddVehicleInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of VehicleInputProxy
  """
  addVehicleInputProxys(input: [AddVehicleInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of VehicleInputProxy
  """
  updateVehicleInputProxy(input: UpdateVehicleInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of VehicleInputProxy
  """
  updateVehicleInputProxys(input: [UpdateVehicleInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of VehicleInputProxy
  """
  deleteVehicleInputProxy(id: ID!): VehicleInputProxy

  """
  Autogenerated mutation for deleting multiple instance of VehicleInputProxy
  """
  deleteVehicleInputProxys(ids: [ID!]): [VehicleInputProxy!]!

  """
  Autogenerated mutation for adding single instance of MapInputProxy
  """
  addMapInputProxy(input: AddMapInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of MapInputProxy
  """
  addMapInputProxys(input: [AddMapInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of MapInputProxy
  """
  updateMapInputProxy(input: UpdateMapInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of MapInputProxy
  """
  updateMapInputProxys(input: [UpdateMapInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of MapInputProxy
  """
  deleteMapInputProxy(id: ID!): MapInputProxy

  """
  Autogenerated mutation for deleting multiple instance of MapInputProxy
  """
  deleteMapInputProxys(ids: [ID!]): [MapInputProxy!]!

  """
  Autogenerated mutation for adding single instance of ConsumableInputProxy
  """
  addConsumableInputProxy(input: AddConsumableInputProxyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ConsumableInputProxy
  """
  addConsumableInputProxys(input: [AddConsumableInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of ConsumableInputProxy
  """
  updateConsumableInputProxy(input: UpdateConsumableInputProxyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ConsumableInputProxy
  """
  updateConsumableInputProxys(input: [UpdateConsumableInputProxyInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of ConsumableInputProxy
  """
  deleteConsumableInputProxy(id: ID!): ConsumableInputProxy

  """
  Autogenerated mutation for deleting multiple instance of ConsumableInputProxy
  """
  deleteConsumableInputProxys(ids: [ID!]): [ConsumableInputProxy!]!

  """
  Autogenerated mutation for adding single instance of FieldValue
  """
  addFieldValue(input: AddFieldValueInput!): ID

  """
  Autogenerated mutation for adding multiple instances of FieldValue
  """
  addFieldValues(input: [AddFieldValueInput]!): [ID!]!

  """
  Autogenerated mutation for updating single instance of FieldValue
  """
  updateFieldValue(input: UpdateFieldValueInput!): ID

  """
  Autogenerated mutation for updating multiple instance of FieldValue
  """
  updateFieldValues(input: [UpdateFieldValueInput]!): [ID!]!

  """
  Autogenerated mutation for deleting single instance of FieldValue
  """
  deleteFieldValue(id: ID!): FieldValue

  """
  Autogenerated mutation for deleting multiple instance of FieldValue
  """
  deleteFieldValues(ids: [ID!]): [FieldValue!]!
  selectProducer(
    sim: ID!
    type: ProducerTypeEnumAsInput
    level: ID
    x: Int
    y: Int
    take: Int
    offset: Int
  ): [Producer!]!
  truncateCompany: [Company!]!
  actionProgressByTypeAndOrStatus(
    sim: ID!
    type: ActionTypeEnumAsInput
    status: ActionStatusEnumAsInput
  ): [ActionProgress!]!
  truncateSimulation: [Simulation!]!
  cloneCity(city: CityAsInput!): ID!
  cloneConsumables(consumables: [ConsumableAsInput!]!): [ID!]!
  cloneConsumable(consumable: ConsumableAsInput!): ID!
  cloneStorage(storage: StorageAsInput!): ID!

  """
  Clear cache for this service
  """
  clearCache: Boolean!
}

type Order {
  id: ID!
  product: ProductQuantity!
  orderType: OrderTypeEnum!
  vehicle: ID!
  paths: [ID!]!
  counterparty: CounterpartyUnion!
  sim: ID!
}

input OrderAsInput {
  id: ID!
  product: ProductQuantityAsInput!
  orderType: OrderTypeEnumAsInput!
  vehicle: ID!
  paths: [ID!]!
  counterparty: CounterpartyUnionAsInput!
  sim: ID!
}

type OrderedLocation {
  id: ID!
  order: Int!
  x: Int!
  y: Int!
  sim: ID!
  path: ID!
}

input OrderedLocationAsInput {
  id: ID!
  order: Int!
  x: Int!
  y: Int!
  sim: ID!
  path: ID!
}

type OrderedLocationOutput {
  id: ID!
  order: Int!
  x: Int!
  y: Int!
  sim: ID!
  path: ID!
}

type OrderTypeEnum {
  id: ID!
}

input OrderTypeEnumAsInput {
  id: ID!
}

type Path {
  id: ID!
  type: PathTypeEnumOutput!
  orderedLocations: [OrderedLocationOutput!]!
  sim: ID!
}

input PathAsInput {
  id: ID!
  type: PathTypeEnumAsInput!
  orderedLocations: [OrderedLocationAsInput!]!
  sim: ID!
}

type PathConfig {
  id: ID!
  type: PathTypeEnumOutput!
  actionRequirements: [ActionTypeRequirement!]!
}

input PathConfigAsInput {
  id: ID!
  type: PathTypeEnumAsInput!
  actionRequirements: [ActionTypeRequirementAsInput!]!
}

"""
Autogenerated input for modifying instance of Path
"""
type PathInputProxy {
  id: ID!
  type: ID
  orderedLocations: [ID]
  sim: ID
}

type PathTypeEnum {
  id: ID!
}

input PathTypeEnumAsInput {
  id: ID!
}

type PathTypeEnumOutput {
  id: ID!
}

type Producer {
  id: ID!
  sim: ID!
  level: ProducerLevelOutput!
  storage: [StorageOutput!]!
  type: ProducerTypeEnumOutput!
  x: Int!
  y: Int!
}

input ProducerAsInput {
  id: ID!
  sim: ID!
  level: ProducerLevelAsInput!
  storage: [StorageAsInput!]!
  type: ProducerTypeEnumAsInput!
  x: Int!
  y: Int!
}

"""
Autogenerated input for modifying instance of Producer
"""
type ProducerInputProxy {
  id: ID!
  sim: ID
  level: ID
  storage: [ID]
  type: ID
  x: Int
  y: Int
}

type ProducerLevel {
  id: ID!
  actionRequirements: [ActionTypeRequirement!]
  baseCostPerUnit: Float!
  stoppageSurchargeRate: Float!
  nextLevel: ID
  inputs: [ProductQuantity!]
  outputs: [ProductQuantity!]
  storage: [ProductQuantity!]
}

input ProducerLevelAsInput {
  id: ID!
  actionRequirements: [ActionTypeRequirementAsInput!]!
  baseCostPerUnit: Float!
  stoppageSurchargeRate: Float!
  nextLevel: ID
  inputs: [ProductQuantityAsInput!]!
  outputs: [ProductQuantityAsInput!]!
  storage: [ProductQuantityAsInput!]!
}

type ProducerLevelOutput {
  id: ID!
  actionRequirements: [ActionTypeRequirement!]!
  baseCostPerUnit: Float!
  stoppageSurchargeRate: Float!
  nextLevel: ID
  inputs: [ProductQuantity!]!
  outputs: [ProductQuantity!]!
  storage: [ProductQuantity!]!
}

type ProducerTypeEnum {
  id: ID!
}

input ProducerTypeEnumAsInput {
  id: ID!
}

type ProducerTypeEnumOutput {
  id: ID!
}

type ProductionReport {
  id: ID!
  producerReports: [StorageTransactionReport!]
  ok: Boolean!
}

input ProductionReportAsInput {
  id: ID!
  producerReports: [StorageTransactionReportAsInput!]!
  ok: Boolean!
}

type ProductionReportOutput {
  id: ID!
  producerReports: [StorageTransactionReport!]!
  ok: Boolean!
}

type ProductQuantity {
  id: ID!
  type: ProductTypeEnumOutput!
  quantity: Float!
}

input ProductQuantityAsInput {
  id: ID!
  type: ProductTypeEnumAsInput!
  quantity: Float!
}

type ProductTypeEnum {
  id: ID!
}

input ProductTypeEnumAsInput {
  id: ID!
}

type ProductTypeEnumOutput {
  id: ID!
}

type Query {
  """
  All instances of SimulationStatusEnum kind
  """
  allSimulationStatusEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimulationStatusEnum!]!

  """
  Get single instance of SimulationStatusEnum kind by ID
  """
  simulationStatusEnum(id: ID!): SimulationStatusEnum

  """
  Get list of instance of SimulationStatusEnum kind by IDs
  """
  simulationStatusEnums(ids: [ID]!): [SimulationStatusEnum!]!

  """
  Get instances of SimulationStatusEnum kind based on one or more field filters
  """
  simulationStatusEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimulationStatusEnum!]!

  """
  All instances of ActionsReport kind
  """
  allActionsReports(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionsReport!]!

  """
  Get single instance of ActionsReport kind by ID
  """
  actionsReport(id: ID!): ActionsReport

  """
  Get list of instance of ActionsReport kind by IDs
  """
  actionsReports(ids: [ID]!): [ActionsReport!]!

  """
  Get instances of ActionsReport kind based on one or more field filters
  """
  actionsReportFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionsReport!]!

  """
  All instances of FacilityLevel kind
  """
  allFacilityLevels(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FacilityLevel!]!

  """
  Get single instance of FacilityLevel kind by ID
  """
  facilityLevel(id: ID!): FacilityLevel

  """
  Get list of instance of FacilityLevel kind by IDs
  """
  facilityLevels(ids: [ID]!): [FacilityLevel!]!

  """
  Get instances of FacilityLevel kind based on one or more field filters
  """
  facilityLevelFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FacilityLevel!]!

  """
  All instances of Path kind
  """
  allPaths(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Path!]!

  """
  Get single instance of Path kind by ID
  """
  path(id: ID!): Path

  """
  Get list of instance of Path kind by IDs
  """
  paths(ids: [ID]!): [Path!]!

  """
  Get instances of Path kind based on one or more field filters
  """
  pathFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Path!]!

  """
  All instances of Vehicle kind
  """
  allVehicles(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Vehicle!]!

  """
  Get single instance of Vehicle kind by ID
  """
  vehicle(id: ID!): Vehicle

  """
  Get list of instance of Vehicle kind by IDs
  """
  vehicles(ids: [ID]!): [Vehicle!]!

  """
  Get instances of Vehicle kind based on one or more field filters
  """
  vehicleFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Vehicle!]!

  """
  All instances of City kind
  """
  allCitys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [City!]!

  """
  Get single instance of City kind by ID
  """
  city(id: ID!): City

  """
  Get list of instance of City kind by IDs
  """
  citys(ids: [ID]!): [City!]!

  """
  Get instances of City kind based on one or more field filters
  """
  cityFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [City!]!

  """
  All instances of ProductTypeEnum kind
  """
  allProductTypeEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProductTypeEnum!]!

  """
  Get single instance of ProductTypeEnum kind by ID
  """
  productTypeEnum(id: ID!): ProductTypeEnum

  """
  Get list of instance of ProductTypeEnum kind by IDs
  """
  productTypeEnums(ids: [ID]!): [ProductTypeEnum!]!

  """
  Get instances of ProductTypeEnum kind based on one or more field filters
  """
  productTypeEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProductTypeEnum!]!

  """
  All instances of Facility kind
  """
  allFacilitys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Facility!]!

  """
  Get single instance of Facility kind by ID
  """
  facility(id: ID!): Facility

  """
  Get list of instance of Facility kind by IDs
  """
  facilitys(ids: [ID]!): [Facility!]!

  """
  Get instances of Facility kind based on one or more field filters
  """
  facilityFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Facility!]!

  """
  All instances of VehicleTypeEnum kind
  """
  allVehicleTypeEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [VehicleTypeEnum!]!

  """
  Get single instance of VehicleTypeEnum kind by ID
  """
  vehicleTypeEnum(id: ID!): VehicleTypeEnum

  """
  Get list of instance of VehicleTypeEnum kind by IDs
  """
  vehicleTypeEnums(ids: [ID]!): [VehicleTypeEnum!]!

  """
  Get instances of VehicleTypeEnum kind based on one or more field filters
  """
  vehicleTypeEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [VehicleTypeEnum!]!

  """
  All instances of CompanyReport kind
  """
  allCompanyReports(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CompanyReport!]!

  """
  Get single instance of CompanyReport kind by ID
  """
  companyReport(id: ID!): CompanyReport

  """
  Get list of instance of CompanyReport kind by IDs
  """
  companyReports(ids: [ID]!): [CompanyReport!]!

  """
  Get instances of CompanyReport kind based on one or more field filters
  """
  companyReportFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CompanyReport!]!

  """
  All instances of Company kind
  """
  allCompanys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Company!]!

  """
  Get single instance of Company kind by ID
  """
  company(id: ID!): Company

  """
  Get list of instance of Company kind by IDs
  """
  companys(ids: [ID]!): [Company!]!

  """
  Get instances of Company kind based on one or more field filters
  """
  companyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Company!]!

  """
  All instances of ProducerLevel kind
  """
  allProducerLevels(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProducerLevel!]!

  """
  Get single instance of ProducerLevel kind by ID
  """
  producerLevel(id: ID!): ProducerLevel

  """
  Get list of instance of ProducerLevel kind by IDs
  """
  producerLevels(ids: [ID]!): [ProducerLevel!]!

  """
  Get instances of ProducerLevel kind based on one or more field filters
  """
  producerLevelFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProducerLevel!]!

  """
  All instances of ResearchStatusEnum kind
  """
  allResearchStatusEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ResearchStatusEnum!]!

  """
  Get single instance of ResearchStatusEnum kind by ID
  """
  researchStatusEnum(id: ID!): ResearchStatusEnum

  """
  Get list of instance of ResearchStatusEnum kind by IDs
  """
  researchStatusEnums(ids: [ID]!): [ResearchStatusEnum!]!

  """
  Get instances of ResearchStatusEnum kind based on one or more field filters
  """
  researchStatusEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ResearchStatusEnum!]!

  """
  All instances of Map kind
  """
  allMaps(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Map!]!

  """
  Get single instance of Map kind by ID
  """
  map(id: ID!): Map

  """
  Get list of instance of Map kind by IDs
  """
  maps(ids: [ID]!): [Map!]!

  """
  Get instances of Map kind based on one or more field filters
  """
  mapFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Map!]!

  """
  All instances of VehicleLevel kind
  """
  allVehicleLevels(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [VehicleLevel!]!

  """
  Get single instance of VehicleLevel kind by ID
  """
  vehicleLevel(id: ID!): VehicleLevel

  """
  Get list of instance of VehicleLevel kind by IDs
  """
  vehicleLevels(ids: [ID]!): [VehicleLevel!]!

  """
  Get instances of VehicleLevel kind based on one or more field filters
  """
  vehicleLevelFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [VehicleLevel!]!

  """
  All instances of TileTypeEnum kind
  """
  allTileTypeEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [TileTypeEnum!]!

  """
  Get single instance of TileTypeEnum kind by ID
  """
  tileTypeEnum(id: ID!): TileTypeEnum

  """
  Get list of instance of TileTypeEnum kind by IDs
  """
  tileTypeEnums(ids: [ID]!): [TileTypeEnum!]!

  """
  Get instances of TileTypeEnum kind based on one or more field filters
  """
  tileTypeEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [TileTypeEnum!]!

  """
  All instances of Simulation kind
  """
  allSimulations(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Simulation!]!

  """
  Get single instance of Simulation kind by ID
  """
  simulation(id: ID!): Simulation

  """
  Get list of instance of Simulation kind by IDs
  """
  simulations(ids: [ID]!): [Simulation!]!

  """
  Get instances of Simulation kind based on one or more field filters
  """
  simulationFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Simulation!]!

  """
  All instances of SimulationStepResult kind
  """
  allSimulationStepResults(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimulationStepResult!]!

  """
  Get single instance of SimulationStepResult kind by ID
  """
  simulationStepResult(id: ID!): SimulationStepResult

  """
  Get list of instance of SimulationStepResult kind by IDs
  """
  simulationStepResults(ids: [ID]!): [SimulationStepResult!]!

  """
  Get instances of SimulationStepResult kind based on one or more field filters
  """
  simulationStepResultFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimulationStepResult!]!

  """
  All instances of SimulationConfig kind
  """
  allSimulationConfigs(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimulationConfig!]!

  """
  Get single instance of SimulationConfig kind by ID
  """
  simulationConfig(id: ID!): SimulationConfig

  """
  Get list of instance of SimulationConfig kind by IDs
  """
  simulationConfigs(ids: [ID]!): [SimulationConfig!]!

  """
  Get instances of SimulationConfig kind based on one or more field filters
  """
  simulationConfigFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimulationConfig!]!

  """
  All instances of Producer kind
  """
  allProducers(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Producer!]!

  """
  Get single instance of Producer kind by ID
  """
  producer(id: ID!): Producer

  """
  Get list of instance of Producer kind by IDs
  """
  producers(ids: [ID]!): [Producer!]!

  """
  Get instances of Producer kind based on one or more field filters
  """
  producerFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Producer!]!

  """
  All instances of FacilityTypeEnum kind
  """
  allFacilityTypeEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FacilityTypeEnum!]!

  """
  Get single instance of FacilityTypeEnum kind by ID
  """
  facilityTypeEnum(id: ID!): FacilityTypeEnum

  """
  Get list of instance of FacilityTypeEnum kind by IDs
  """
  facilityTypeEnums(ids: [ID]!): [FacilityTypeEnum!]!

  """
  Get instances of FacilityTypeEnum kind based on one or more field filters
  """
  facilityTypeEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FacilityTypeEnum!]!

  """
  All instances of CityConfig kind
  """
  allCityConfigs(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CityConfig!]!

  """
  Get single instance of CityConfig kind by ID
  """
  cityConfig(id: ID!): CityConfig

  """
  Get list of instance of CityConfig kind by IDs
  """
  cityConfigs(ids: [ID]!): [CityConfig!]!

  """
  Get instances of CityConfig kind based on one or more field filters
  """
  cityConfigFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CityConfig!]!

  """
  All instances of PathTypeEnum kind
  """
  allPathTypeEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [PathTypeEnum!]!

  """
  Get single instance of PathTypeEnum kind by ID
  """
  pathTypeEnum(id: ID!): PathTypeEnum

  """
  Get list of instance of PathTypeEnum kind by IDs
  """
  pathTypeEnums(ids: [ID]!): [PathTypeEnum!]!

  """
  Get instances of PathTypeEnum kind based on one or more field filters
  """
  pathTypeEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [PathTypeEnum!]!

  """
  All instances of OrderedLocation kind
  """
  allOrderedLocations(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [OrderedLocation!]!

  """
  Get single instance of OrderedLocation kind by ID
  """
  orderedLocation(id: ID!): OrderedLocation

  """
  Get list of instance of OrderedLocation kind by IDs
  """
  orderedLocations(ids: [ID]!): [OrderedLocation!]!

  """
  Get instances of OrderedLocation kind based on one or more field filters
  """
  orderedLocationFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [OrderedLocation!]!

  """
  All instances of ActionTypeEnum kind
  """
  allActionTypeEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionTypeEnum!]!

  """
  Get single instance of ActionTypeEnum kind by ID
  """
  actionTypeEnum(id: ID!): ActionTypeEnum

  """
  Get list of instance of ActionTypeEnum kind by IDs
  """
  actionTypeEnums(ids: [ID]!): [ActionTypeEnum!]!

  """
  Get instances of ActionTypeEnum kind based on one or more field filters
  """
  actionTypeEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionTypeEnum!]!

  """
  All instances of Consumable kind
  """
  allConsumables(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Consumable!]!

  """
  Get single instance of Consumable kind by ID
  """
  consumable(id: ID!): Consumable

  """
  Get list of instance of Consumable kind by IDs
  """
  consumables(ids: [ID]!): [Consumable!]!

  """
  Get instances of Consumable kind based on one or more field filters
  """
  consumableFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Consumable!]!

  """
  All instances of CityLevel kind
  """
  allCityLevels(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CityLevel!]!

  """
  Get single instance of CityLevel kind by ID
  """
  cityLevel(id: ID!): CityLevel

  """
  Get list of instance of CityLevel kind by IDs
  """
  cityLevels(ids: [ID]!): [CityLevel!]!

  """
  Get instances of CityLevel kind based on one or more field filters
  """
  cityLevelFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CityLevel!]!

  """
  All instances of ActionTypeRequirement kind
  """
  allActionTypeRequirements(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionTypeRequirement!]!

  """
  Get single instance of ActionTypeRequirement kind by ID
  """
  actionTypeRequirement(id: ID!): ActionTypeRequirement

  """
  Get list of instance of ActionTypeRequirement kind by IDs
  """
  actionTypeRequirements(ids: [ID]!): [ActionTypeRequirement!]!

  """
  Get instances of ActionTypeRequirement kind based on one or more field filters
  """
  actionTypeRequirementFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionTypeRequirement!]!

  """
  All instances of Order kind
  """
  allOrders(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Order!]!

  """
  Get single instance of Order kind by ID
  """
  order(id: ID!): Order

  """
  Get list of instance of Order kind by IDs
  """
  orders(ids: [ID]!): [Order!]!

  """
  Get instances of Order kind based on one or more field filters
  """
  orderFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Order!]!

  """
  All instances of ActionProgressInputProxy kind
  """
  allActionProgressInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionProgressInputProxy!]!

  """
  Get single instance of ActionProgressInputProxy kind by ID
  """
  actionProgressInputProxy(id: ID!): ActionProgressInputProxy

  """
  Get list of instance of ActionProgressInputProxy kind by IDs
  """
  actionProgressInputProxys(ids: [ID]!): [ActionProgressInputProxy!]!

  """
  Get instances of ActionProgressInputProxy kind based on one or more field filters
  """
  actionProgressInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionProgressInputProxy!]!

  """
  All instances of PathConfig kind
  """
  allPathConfigs(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [PathConfig!]!

  """
  Get single instance of PathConfig kind by ID
  """
  pathConfig(id: ID!): PathConfig

  """
  Get list of instance of PathConfig kind by IDs
  """
  pathConfigs(ids: [ID]!): [PathConfig!]!

  """
  Get instances of PathConfig kind based on one or more field filters
  """
  pathConfigFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [PathConfig!]!

  """
  All instances of ActionStatusEnum kind
  """
  allActionStatusEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionStatusEnum!]!

  """
  Get single instance of ActionStatusEnum kind by ID
  """
  actionStatusEnum(id: ID!): ActionStatusEnum

  """
  Get list of instance of ActionStatusEnum kind by IDs
  """
  actionStatusEnums(ids: [ID]!): [ActionStatusEnum!]!

  """
  Get instances of ActionStatusEnum kind based on one or more field filters
  """
  actionStatusEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionStatusEnum!]!

  """
  All instances of CounterpartyUnion kind
  """
  allCounterpartyUnions(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CounterpartyUnion!]!

  """
  Get single instance of CounterpartyUnion kind by ID
  """
  counterpartyUnion(id: ID!): CounterpartyUnion

  """
  Get list of instance of CounterpartyUnion kind by IDs
  """
  counterpartyUnions(ids: [ID]!): [CounterpartyUnion!]!

  """
  Get instances of CounterpartyUnion kind based on one or more field filters
  """
  counterpartyUnionFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CounterpartyUnion!]!

  """
  All instances of MapArea kind
  """
  allMapAreas(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapArea!]!

  """
  Get single instance of MapArea kind by ID
  """
  mapArea(id: ID!): MapArea

  """
  Get list of instance of MapArea kind by IDs
  """
  mapAreas(ids: [ID]!): [MapArea!]!

  """
  Get instances of MapArea kind based on one or more field filters
  """
  mapAreaFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapArea!]!

  """
  All instances of StorageAmount kind
  """
  allStorageAmounts(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [StorageAmount!]!

  """
  Get single instance of StorageAmount kind by ID
  """
  storageAmount(id: ID!): StorageAmount

  """
  Get list of instance of StorageAmount kind by IDs
  """
  storageAmounts(ids: [ID]!): [StorageAmount!]!

  """
  Get instances of StorageAmount kind based on one or more field filters
  """
  storageAmountFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [StorageAmount!]!

  """
  All instances of OrderTypeEnum kind
  """
  allOrderTypeEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [OrderTypeEnum!]!

  """
  Get single instance of OrderTypeEnum kind by ID
  """
  orderTypeEnum(id: ID!): OrderTypeEnum

  """
  Get list of instance of OrderTypeEnum kind by IDs
  """
  orderTypeEnums(ids: [ID]!): [OrderTypeEnum!]!

  """
  Get instances of OrderTypeEnum kind based on one or more field filters
  """
  orderTypeEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [OrderTypeEnum!]!

  """
  All instances of StorageTransaction kind
  """
  allStorageTransactions(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [StorageTransaction!]!

  """
  Get single instance of StorageTransaction kind by ID
  """
  storageTransaction(id: ID!): StorageTransaction

  """
  Get list of instance of StorageTransaction kind by IDs
  """
  storageTransactions(ids: [ID]!): [StorageTransaction!]!

  """
  Get instances of StorageTransaction kind based on one or more field filters
  """
  storageTransactionFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [StorageTransaction!]!

  """
  All instances of ActionObjectUnion kind
  """
  allActionObjectUnions(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionObjectUnion!]!

  """
  Get single instance of ActionObjectUnion kind by ID
  """
  actionObjectUnion(id: ID!): ActionObjectUnion

  """
  Get list of instance of ActionObjectUnion kind by IDs
  """
  actionObjectUnions(ids: [ID]!): [ActionObjectUnion!]!

  """
  Get instances of ActionObjectUnion kind based on one or more field filters
  """
  actionObjectUnionFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionObjectUnion!]!

  """
  All instances of FieldFilterInputProxy kind
  """
  allFieldFilterInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FieldFilterInputProxy!]!

  """
  Get single instance of FieldFilterInputProxy kind by ID
  """
  fieldFilterInputProxy(id: ID!): FieldFilterInputProxy

  """
  Get list of instance of FieldFilterInputProxy kind by IDs
  """
  fieldFilterInputProxys(ids: [ID]!): [FieldFilterInputProxy!]!

  """
  Get instances of FieldFilterInputProxy kind based on one or more field filters
  """
  fieldFilterInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FieldFilterInputProxy!]!

  """
  All instances of CompanyConfig kind
  """
  allCompanyConfigs(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CompanyConfig!]!

  """
  Get single instance of CompanyConfig kind by ID
  """
  companyConfig(id: ID!): CompanyConfig

  """
  Get list of instance of CompanyConfig kind by IDs
  """
  companyConfigs(ids: [ID]!): [CompanyConfig!]!

  """
  Get instances of CompanyConfig kind based on one or more field filters
  """
  companyConfigFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CompanyConfig!]!

  """
  All instances of StorageTransactionReport kind
  """
  allStorageTransactionReports(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [StorageTransactionReport!]!

  """
  Get single instance of StorageTransactionReport kind by ID
  """
  storageTransactionReport(id: ID!): StorageTransactionReport

  """
  Get list of instance of StorageTransactionReport kind by IDs
  """
  storageTransactionReports(ids: [ID]!): [StorageTransactionReport!]!

  """
  Get instances of StorageTransactionReport kind based on one or more field filters
  """
  storageTransactionReportFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [StorageTransactionReport!]!

  """
  All instances of SupplyDepot kind
  """
  allSupplyDepots(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SupplyDepot!]!

  """
  Get single instance of SupplyDepot kind by ID
  """
  supplyDepot(id: ID!): SupplyDepot

  """
  Get list of instance of SupplyDepot kind by IDs
  """
  supplyDepots(ids: [ID]!): [SupplyDepot!]!

  """
  Get instances of SupplyDepot kind based on one or more field filters
  """
  supplyDepotFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SupplyDepot!]!

  """
  All instances of SupplyDepotLevel kind
  """
  allSupplyDepotLevels(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SupplyDepotLevel!]!

  """
  Get single instance of SupplyDepotLevel kind by ID
  """
  supplyDepotLevel(id: ID!): SupplyDepotLevel

  """
  Get list of instance of SupplyDepotLevel kind by IDs
  """
  supplyDepotLevels(ids: [ID]!): [SupplyDepotLevel!]!

  """
  Get instances of SupplyDepotLevel kind based on one or more field filters
  """
  supplyDepotLevelFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SupplyDepotLevel!]!

  """
  All instances of StorageInputProxy kind
  """
  allStorageInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [StorageInputProxy!]!

  """
  Get single instance of StorageInputProxy kind by ID
  """
  storageInputProxy(id: ID!): StorageInputProxy

  """
  Get list of instance of StorageInputProxy kind by IDs
  """
  storageInputProxys(ids: [ID]!): [StorageInputProxy!]!

  """
  Get instances of StorageInputProxy kind based on one or more field filters
  """
  storageInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [StorageInputProxy!]!

  """
  All instances of ProductionReport kind
  """
  allProductionReports(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProductionReport!]!

  """
  Get single instance of ProductionReport kind by ID
  """
  productionReport(id: ID!): ProductionReport

  """
  Get list of instance of ProductionReport kind by IDs
  """
  productionReports(ids: [ID]!): [ProductionReport!]!

  """
  Get instances of ProductionReport kind based on one or more field filters
  """
  productionReportFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProductionReport!]!

  """
  All instances of CitiesReport kind
  """
  allCitiesReports(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CitiesReport!]!

  """
  Get single instance of CitiesReport kind by ID
  """
  citiesReport(id: ID!): CitiesReport

  """
  Get list of instance of CitiesReport kind by IDs
  """
  citiesReports(ids: [ID]!): [CitiesReport!]!

  """
  Get instances of CitiesReport kind based on one or more field filters
  """
  citiesReportFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CitiesReport!]!

  """
  All instances of CompanyInputProxy kind
  """
  allCompanyInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CompanyInputProxy!]!

  """
  Get single instance of CompanyInputProxy kind by ID
  """
  companyInputProxy(id: ID!): CompanyInputProxy

  """
  Get list of instance of CompanyInputProxy kind by IDs
  """
  companyInputProxys(ids: [ID]!): [CompanyInputProxy!]!

  """
  Get instances of CompanyInputProxy kind based on one or more field filters
  """
  companyInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CompanyInputProxy!]!

  """
  All instances of MapConfig kind
  """
  allMapConfigs(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapConfig!]!

  """
  Get single instance of MapConfig kind by ID
  """
  mapConfig(id: ID!): MapConfig

  """
  Get list of instance of MapConfig kind by IDs
  """
  mapConfigs(ids: [ID]!): [MapConfig!]!

  """
  Get instances of MapConfig kind based on one or more field filters
  """
  mapConfigFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapConfig!]!

  """
  All instances of Storage kind
  """
  allStorages(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Storage!]!

  """
  Get single instance of Storage kind by ID
  """
  storage(id: ID!): Storage

  """
  Get list of instance of Storage kind by IDs
  """
  storages(ids: [ID]!): [Storage!]!

  """
  Get instances of Storage kind based on one or more field filters
  """
  storageFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Storage!]!

  """
  All instances of MapLoadConfig kind
  """
  allMapLoadConfigs(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapLoadConfig!]!

  """
  Get single instance of MapLoadConfig kind by ID
  """
  mapLoadConfig(id: ID!): MapLoadConfig

  """
  Get list of instance of MapLoadConfig kind by IDs
  """
  mapLoadConfigs(ids: [ID]!): [MapLoadConfig!]!

  """
  Get instances of MapLoadConfig kind based on one or more field filters
  """
  mapLoadConfigFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapLoadConfig!]!

  """
  All instances of MapGenerationConfig kind
  """
  allMapGenerationConfigs(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapGenerationConfig!]!

  """
  Get single instance of MapGenerationConfig kind by ID
  """
  mapGenerationConfig(id: ID!): MapGenerationConfig

  """
  Get list of instance of MapGenerationConfig kind by IDs
  """
  mapGenerationConfigs(ids: [ID]!): [MapGenerationConfig!]!

  """
  Get instances of MapGenerationConfig kind based on one or more field filters
  """
  mapGenerationConfigFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapGenerationConfig!]!

  """
  All instances of SupplyDepotInputProxy kind
  """
  allSupplyDepotInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SupplyDepotInputProxy!]!

  """
  Get single instance of SupplyDepotInputProxy kind by ID
  """
  supplyDepotInputProxy(id: ID!): SupplyDepotInputProxy

  """
  Get list of instance of SupplyDepotInputProxy kind by IDs
  """
  supplyDepotInputProxys(ids: [ID]!): [SupplyDepotInputProxy!]!

  """
  Get instances of SupplyDepotInputProxy kind based on one or more field filters
  """
  supplyDepotInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SupplyDepotInputProxy!]!

  """
  All instances of VehiclePathCompatibility kind
  """
  allVehiclePathCompatibilitys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [VehiclePathCompatibility!]!

  """
  Get single instance of VehiclePathCompatibility kind by ID
  """
  vehiclePathCompatibility(id: ID!): VehiclePathCompatibility

  """
  Get list of instance of VehiclePathCompatibility kind by IDs
  """
  vehiclePathCompatibilitys(ids: [ID]!): [VehiclePathCompatibility!]!

  """
  Get instances of VehiclePathCompatibility kind based on one or more field filters
  """
  vehiclePathCompatibilityFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [VehiclePathCompatibility!]!

  """
  All instances of SimulationInputProxy kind
  """
  allSimulationInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimulationInputProxy!]!

  """
  Get single instance of SimulationInputProxy kind by ID
  """
  simulationInputProxy(id: ID!): SimulationInputProxy

  """
  Get list of instance of SimulationInputProxy kind by IDs
  """
  simulationInputProxys(ids: [ID]!): [SimulationInputProxy!]!

  """
  Get instances of SimulationInputProxy kind based on one or more field filters
  """
  simulationInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimulationInputProxy!]!

  """
  All instances of ActionInputProxy kind
  """
  allActionInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionInputProxy!]!

  """
  Get single instance of ActionInputProxy kind by ID
  """
  actionInputProxy(id: ID!): ActionInputProxy

  """
  Get list of instance of ActionInputProxy kind by IDs
  """
  actionInputProxys(ids: [ID]!): [ActionInputProxy!]!

  """
  Get instances of ActionInputProxy kind based on one or more field filters
  """
  actionInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionInputProxy!]!

  """
  All instances of FinancialReport kind
  """
  allFinancialReports(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FinancialReport!]!

  """
  Get single instance of FinancialReport kind by ID
  """
  financialReport(id: ID!): FinancialReport

  """
  Get list of instance of FinancialReport kind by IDs
  """
  financialReports(ids: [ID]!): [FinancialReport!]!

  """
  Get instances of FinancialReport kind based on one or more field filters
  """
  financialReportFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FinancialReport!]!

  """
  All instances of ActionObjectUnionInputProxy kind
  """
  allActionObjectUnionInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionObjectUnionInputProxy!]!

  """
  Get single instance of ActionObjectUnionInputProxy kind by ID
  """
  actionObjectUnionInputProxy(id: ID!): ActionObjectUnionInputProxy

  """
  Get list of instance of ActionObjectUnionInputProxy kind by IDs
  """
  actionObjectUnionInputProxys(ids: [ID]!): [ActionObjectUnionInputProxy!]!

  """
  Get instances of ActionObjectUnionInputProxy kind based on one or more field filters
  """
  actionObjectUnionInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionObjectUnionInputProxy!]!

  """
  All instances of SimObjects kind
  """
  allSimObjectss(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimObjects!]!

  """
  Get single instance of SimObjects kind by ID
  """
  simObjects(id: ID!): SimObjects

  """
  Get list of instance of SimObjects kind by IDs
  """
  simObjectss(ids: [ID]!): [SimObjects!]!

  """
  Get instances of SimObjects kind based on one or more field filters
  """
  simObjectsFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [SimObjects!]!

  """
  All instances of ProductQuantity kind
  """
  allProductQuantitys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProductQuantity!]!

  """
  Get single instance of ProductQuantity kind by ID
  """
  productQuantity(id: ID!): ProductQuantity

  """
  Get list of instance of ProductQuantity kind by IDs
  """
  productQuantitys(ids: [ID]!): [ProductQuantity!]!

  """
  Get instances of ProductQuantity kind based on one or more field filters
  """
  productQuantityFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProductQuantity!]!

  """
  All instances of ProducerInputProxy kind
  """
  allProducerInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProducerInputProxy!]!

  """
  Get single instance of ProducerInputProxy kind by ID
  """
  producerInputProxy(id: ID!): ProducerInputProxy

  """
  Get list of instance of ProducerInputProxy kind by IDs
  """
  producerInputProxys(ids: [ID]!): [ProducerInputProxy!]!

  """
  Get instances of ProducerInputProxy kind based on one or more field filters
  """
  producerInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProducerInputProxy!]!

  """
  All instances of CityInputProxy kind
  """
  allCityInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CityInputProxy!]!

  """
  Get single instance of CityInputProxy kind by ID
  """
  cityInputProxy(id: ID!): CityInputProxy

  """
  Get list of instance of CityInputProxy kind by IDs
  """
  cityInputProxys(ids: [ID]!): [CityInputProxy!]!

  """
  Get instances of CityInputProxy kind based on one or more field filters
  """
  cityInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [CityInputProxy!]!

  """
  All instances of ProducerTypeEnum kind
  """
  allProducerTypeEnums(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProducerTypeEnum!]!

  """
  Get single instance of ProducerTypeEnum kind by ID
  """
  producerTypeEnum(id: ID!): ProducerTypeEnum

  """
  Get list of instance of ProducerTypeEnum kind by IDs
  """
  producerTypeEnums(ids: [ID]!): [ProducerTypeEnum!]!

  """
  Get instances of ProducerTypeEnum kind based on one or more field filters
  """
  producerTypeEnumFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ProducerTypeEnum!]!

  """
  All instances of PathInputProxy kind
  """
  allPathInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [PathInputProxy!]!

  """
  Get single instance of PathInputProxy kind by ID
  """
  pathInputProxy(id: ID!): PathInputProxy

  """
  Get list of instance of PathInputProxy kind by IDs
  """
  pathInputProxys(ids: [ID]!): [PathInputProxy!]!

  """
  Get instances of PathInputProxy kind based on one or more field filters
  """
  pathInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [PathInputProxy!]!

  """
  All instances of ActionProgress kind
  """
  allActionProgresss(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionProgress!]!

  """
  Get single instance of ActionProgress kind by ID
  """
  actionProgress(id: ID!): ActionProgress

  """
  Get list of instance of ActionProgress kind by IDs
  """
  actionProgresss(ids: [ID]!): [ActionProgress!]!

  """
  Get instances of ActionProgress kind based on one or more field filters
  """
  actionProgressFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ActionProgress!]!

  """
  All instances of FacilityInputProxy kind
  """
  allFacilityInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FacilityInputProxy!]!

  """
  Get single instance of FacilityInputProxy kind by ID
  """
  facilityInputProxy(id: ID!): FacilityInputProxy

  """
  Get list of instance of FacilityInputProxy kind by IDs
  """
  facilityInputProxys(ids: [ID]!): [FacilityInputProxy!]!

  """
  Get instances of FacilityInputProxy kind based on one or more field filters
  """
  facilityInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FacilityInputProxy!]!

  """
  All instances of Tile kind
  """
  allTiles(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Tile!]!

  """
  Get single instance of Tile kind by ID
  """
  tile(id: ID!): Tile

  """
  Get list of instance of Tile kind by IDs
  """
  tiles(ids: [ID]!): [Tile!]!

  """
  Get instances of Tile kind based on one or more field filters
  """
  tileFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Tile!]!

  """
  All instances of VehicleInputProxy kind
  """
  allVehicleInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [VehicleInputProxy!]!

  """
  Get single instance of VehicleInputProxy kind by ID
  """
  vehicleInputProxy(id: ID!): VehicleInputProxy

  """
  Get list of instance of VehicleInputProxy kind by IDs
  """
  vehicleInputProxys(ids: [ID]!): [VehicleInputProxy!]!

  """
  Get instances of VehicleInputProxy kind based on one or more field filters
  """
  vehicleInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [VehicleInputProxy!]!

  """
  All instances of MapInputProxy kind
  """
  allMapInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapInputProxy!]!

  """
  Get single instance of MapInputProxy kind by ID
  """
  mapInputProxy(id: ID!): MapInputProxy

  """
  Get list of instance of MapInputProxy kind by IDs
  """
  mapInputProxys(ids: [ID]!): [MapInputProxy!]!

  """
  Get instances of MapInputProxy kind based on one or more field filters
  """
  mapInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [MapInputProxy!]!

  """
  All instances of ConsumableInputProxy kind
  """
  allConsumableInputProxys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ConsumableInputProxy!]!

  """
  Get single instance of ConsumableInputProxy kind by ID
  """
  consumableInputProxy(id: ID!): ConsumableInputProxy

  """
  Get list of instance of ConsumableInputProxy kind by IDs
  """
  consumableInputProxys(ids: [ID]!): [ConsumableInputProxy!]!

  """
  Get instances of ConsumableInputProxy kind based on one or more field filters
  """
  consumableInputProxyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ConsumableInputProxy!]!

  """
  All instances of FieldValue kind
  """
  allFieldValues(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FieldValue!]!

  """
  Get single instance of FieldValue kind by ID
  """
  fieldValue(id: ID!): FieldValue

  """
  Get list of instance of FieldValue kind by IDs
  """
  fieldValues(ids: [ID]!): [FieldValue!]!

  """
  Get instances of FieldValue kind based on one or more field filters
  """
  fieldValueFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [FieldValue!]!

  """
  Mandatory service manifest.
  """
  info: Info!

  """
  Kind Query
  """
  query(input: KindQueryInput!): InstanceSet
  queryJSON(input: KindQueryInput!): String
  selectCity(
    sim: ID!
    level: ID
    x: Int
    y: Int
    take: Int
    offset: Int
  ): [CityOutput!]!
  mapTiles(
    map: ID!
    type: TileTypeEnumAsInput
    take: Int
    offset: Int
    x: Int
    y: Int
  ): [Tile!]!
  selectFacility(
    sim: ID!
    type: FacilityTypeEnumAsInput
    level: ID
    x: Int
    y: Int
    take: Int
    offset: Int
  ): [Facility!]!
  selectPath(
    sim: ID!
    type: PathTypeEnumAsInput
    take: Int
    offset: Int
  ): [Path!]!
  selectVehicle(
    sim: ID!
    type: VehicleTypeEnumAsInput
    facility: ID
    level: ID
    x: Int
    y: Int
    take: Int
    offset: Int
  ): [Vehicle!]!
  projectIdFromSimulationStatusEnum(
    simulationStatusEnum: SimulationStatusEnumAsInput!
  ): ID!
  constructActionProgressInputProxy(
    id: ID!
    action: ID
    step: Float
    remainingSteps: Float
    status: ID
    info: String
  ): ActionProgressInputProxy!
  projectIdFromSimulationConfig(simulationConfig: SimulationConfigAsInput!): ID!
  projectSeedFromSimulationConfig(
    simulationConfig: SimulationConfigAsInput!
  ): Float!
  projectMapConfigFromSimulationConfig(
    simulationConfig: SimulationConfigAsInput!
  ): MapConfig!
  projectCompanyConfigFromSimulationConfig(
    simulationConfig: SimulationConfigAsInput!
  ): CompanyConfig!
  projectCityConfigFromSimulationConfig(
    simulationConfig: SimulationConfigAsInput!
  ): CityConfig!
  projectPathConfigFromSimulationConfig(
    simulationConfig: SimulationConfigAsInput!
  ): [PathConfig!]!
  makeSimFilters(sim: ID!): [FieldFilterInputProxy!]!
  projectIdFromMap(map: MapAsInput!): ID!
  projectSizeXFromMap(map: MapAsInput!): Int!
  projectSizeYFromMap(map: MapAsInput!): Int!
  projectActionRequirementsFromProducerLevel(
    producerLevel: ProducerLevelAsInput!
  ): [ActionTypeRequirement!]!
  projectBaseCostPerUnitFromProducerLevel(
    producerLevel: ProducerLevelAsInput!
  ): Float!
  projectStoppageSurchargeRateFromProducerLevel(
    producerLevel: ProducerLevelAsInput!
  ): Float!
  projectInputsFromProducerLevel(
    producerLevel: ProducerLevelAsInput!
  ): [ProductQuantity!]!
  projectOutputsFromProducerLevel(
    producerLevel: ProducerLevelAsInput!
  ): [ProductQuantity!]!
  projectStorageFromProducerLevel(
    producerLevel: ProducerLevelAsInput!
  ): [ProductQuantity!]!
  constructCompanyInputProxy(
    id: ID!
    name: String
    credit: Float
    facilityUnlocks: [ID]
    vehicleUnlocks: [ID]
    producerUnlocks: [ID]
    storageDepotUnlocks: [ID]
    config: ID
  ): CompanyInputProxy!
  simulationStatusDone: SimulationStatusEnumOutput!
  constructSimulationStepResult(
    id: ID!
    status: SimulationStatusEnumAsInput!
    companyReport: CompanyReportAsInput!
  ): SimulationStepResult!
  actionStatusInProgress: ActionStatusEnumOutput!
  makeActionProgressFilters(
    sim: ID!
    type: ActionTypeEnumAsInput
    status: ActionStatusEnumAsInput
  ): [FieldFilterInputProxy!]!
  projectIdFromSimulation(simulation: SimulationAsInput!): ID!
  projectConfigFromSimulation(
    simulation: SimulationAsInput!
  ): SimulationConfigOutput!
  projectCompanyFromSimulation(simulation: SimulationAsInput!): Company!
  projectMapFromSimulation(simulation: SimulationAsInput!): MapOutput!
  projectStatusFromSimulation(simulation: SimulationAsInput!): Float!
  projectIdFromFacility(facility: FacilityAsInput!): ID!
  isTileOpen(sim: ID!, x: Int!, y: Int!): Boolean!
  isNotEmptyTiles(tiles: [TileAsInput!]!): Boolean!
  projectIdFromOrderedLocation(orderedLocation: OrderedLocationAsInput!): ID!
  projectOrderFromOrderedLocation(
    orderedLocation: OrderedLocationAsInput!
  ): Int!
  projectXFromOrderedLocation(orderedLocation: OrderedLocationAsInput!): Int!
  projectYFromOrderedLocation(orderedLocation: OrderedLocationAsInput!): Int!
  projectMapFromOrderedLocation(orderedLocation: OrderedLocationAsInput!): ID!
  projectPathFromOrderedLocation(orderedLocation: OrderedLocationAsInput!): ID!
  constructSimulation(
    id: ID!
    config: SimulationConfigAsInput!
    company: CompanyAsInput!
    map: MapAsInput!
  ): Simulation!
  projectStorageFromProducer(producer: ProducerAsInput!): [StorageOutput!]!
  projectStepFromSimulation(simulation: SimulationAsInput!): Float!
  projectIdFromCompany(company: CompanyAsInput!): ID!
  actionStatusFailed: ActionStatusEnumOutput!
  projectIdFromProductTypeEnum(productTypeEnum: ProductTypeEnumAsInput!): ID!
  constructCityInputProxy(
    id: ID!
    sim: ID
    population: Float
    consumables: [ID]
    level: ID
    x: Int
    y: Int
  ): CityInputProxy!
  constructActionInputProxy(id: ID!, type: ID, object: ID): ActionInputProxy!
  projectIdFromProducer(producer: ProducerAsInput!): ID!
  projectSimFromProducer(producer: ProducerAsInput!): ID!
  projectTilesFromProducer(producer: ProducerAsInput!): [ID!]!
  projectLevelFromProducer(producer: ProducerAsInput!): ProducerLevelOutput!
  projectCompanyConfigFromSimulationId(sim: ID!): CompanyConfig!
  selectSupplyDepot(
    sim: ID!
    level: ID
    x: Int
    y: Int
    take: Int
    offset: Int
  ): [SupplyDepot!]!
  projectIdFromPath(path: PathAsInput!): ID!
  projectIdFromStorage(storage: StorageAsInput!): ID!
  projectProductFromStorage(storage: StorageAsInput!): ProductTypeEnumOutput!
  projectCapacityFromStorage(storage: StorageAsInput!): Float!
  projectAmountFromStorage(storage: StorageAsInput!): Float!
  constructProducerInputProxy(
    id: ID!
    sim: ID
    level: ID
    storage: [ID]
    type: ID
    x: Int
    y: Int
  ): ProducerInputProxy!
  constructSimulationInputProxy(
    id: ID!
    config: ID
    company: ID
    map: ID
    step: Float
    status: ID
  ): SimulationInputProxy!
  actionStatusCompleted: ActionStatusEnumOutput!
  concatActionProgress(
    a: [ActionProgressAsInput]
    b: [ActionProgressAsInput]
  ): [ActionProgress!]!
  appendActionProgress(
    list: [ActionProgressAsInput!]!
    item: ActionProgressAsInput
  ): [ActionProgress!]!
  mapFacilitiesAt(map: ID!, x: Int!, y: Int!): [Facility!]!
  selectPathsAt(sim: ID!, x: Int!, y: Int!, type: PathTypeEnumAsInput): [Path!]!
  mapVehiclesAt(map: ID!, x: Int!, y: Int!): [Vehicle!]!
  projectIdFromCityConfig(cityConfig: CityConfigAsInput!): ID!
  projectGrowthRateFromCityConfig(cityConfig: CityConfigAsInput!): Float!
  projectDeclineRateFromCityConfig(cityConfig: CityConfigAsInput!): Float!
  projectInitialPopulationFromCityConfig(cityConfig: CityConfigAsInput!): Float!
  projectDemandsPerPersonPerStepFromCityConfig(
    cityConfig: CityConfigAsInput!
  ): [ProductQuantity!]!
  projectDefaultLevelFromCityConfig(cityConfig: CityConfigAsInput!): ID!
  projectIdFromCompanyConfig(companyConfig: CompanyConfigAsInput!): ID!
  projectMaxEffortPerStepFromCompanyConfig(
    companyConfig: CompanyConfigAsInput!
  ): Float!
  projectInitialCreditFromCompanyConfig(
    companyConfig: CompanyConfigAsInput!
  ): Float!
  constructCompanyReport(
    id: ID!
    production: ProductionReportAsInput!
    actions: ActionsReportAsInput!
  ): CompanyReportOutput!
  simObjectsAt(sim: ID!, x: Int!, y: Int!): SimObjects!
  projectIdFromCity(city: CityAsInput!): ID!
  simulationStatusError: SimulationStatusEnumOutput!
  projectIdFromMapConfig(mapConfig: MapConfigAsInput!): ID!
  projectLoadConfigFromMapConfig(mapConfig: MapConfigAsInput!): MapLoadConfig
  projectGenerateConfigFromMapConfig(
    mapConfig: MapConfigAsInput!
  ): MapGenerationConfig
  projectIdFromMapLoadConfig(mapLoadConfig: MapLoadConfigAsInput!): ID!
  constructActionsReport(
    id: ID!
    progress: [ActionProgressAsInput!]!
    ok: Boolean!
  ): ActionsReportOutput!
  projectIdFromProducerLevel(producerLevel: ProducerLevelAsInput!): ID!
  projectNextLevelFromProducerLevel(producerLevel: ProducerLevelAsInput!): ID
  simulationStatusReady: SimulationStatusEnumOutput!
  constructStorageInputProxy(
    id: ID!
    product: ID
    capacity: Float
    amount: Float
  ): StorageInputProxy!
  projectIdFromProductQuantity(productQuantity: ProductQuantityAsInput!): ID!
  projectTypeFromProductQuantity(
    productQuantity: ProductQuantityAsInput!
  ): ProductTypeEnumOutput!
  projectQuantityFromProductQuantity(
    productQuantity: ProductQuantityAsInput!
  ): Float!
  projectConfigFromCompany(company: CompanyAsInput!): CompanyConfig!
  projectIdFromVehicle(vehicle: VehicleAsInput!): ID!
  projectSimFromCity(city: CityAsInput!): ID!
  projectPopulationFromCity(city: CityAsInput!): Float!
  projectConsumablesFromCity(city: CityAsInput!): [ConsumableOutput!]!
  projectLevelFromCity(city: CityAsInput!): CityLevel!
  projectXFromCity(city: CityAsInput!): Int!
  projectYFromCity(city: CityAsInput!): Int!
  projectCompanyConfigFromSimulation(sim: SimulationAsInput!): CompanyConfig!
  makeProducerFilters(
    sim: ID!
    type: ProductTypeEnumAsInput
    level: ID
    x: Int
    y: Int
  ): [FieldFilterInputProxy!]!
  mapSupplyDepotsAt(map: ID!, x: Int!, y: Int!): [SupplyDepot!]!
  simMapId(sim: ID!): ID!
  simConfig(sim: ID!): SimulationConfigOutput!
  constructActionObjectUnionInputProxy(
    id: ID!
    producer: ID
    facility: ID
    vehicle: ID
    pathType: ID
    tiles: [ID]
    order: ID
  ): ActionObjectUnionInputProxy!
  projectConsumablesFromCityConfig(
    cityConfig: CityConfigAsInput!
  ): [ConsumableOutput!]!
  isTileOfType(map: ID!, x: Int!, y: Int!, type: TileTypeEnumAsInput!): Boolean!
  filterPathsByType(paths: [PathAsInput!]!, type: PathTypeEnumAsInput): [Path!]!
  isNotAnySimObjects(simObjects: SimObjectsAsInput!): Boolean!
  makeVehicleFilters(
    sim: ID!
    type: VehicleTypeEnumAsInput
    facility: ID
    level: ID
    x: Int
    y: Int
  ): [FieldFilterInputProxy!]!
  projectIdFromSupplyDepot(supplyDepot: SupplyDepotAsInput!): ID!
  makeCityFilters(
    sim: ID!
    level: ID
    x: Int
    y: Int
  ): [FieldFilterInputProxy!]!
  makeMapFilters(map: ID!): [FieldFilterInputProxy!]!
  makePathFilters(
    sim: ID!
    type: PathTypeEnumAsInput
  ): [FieldFilterInputProxy!]!
  throwIfNot(condition: Boolean!, msg: String!, pass: ID!): ID!
  projectTypeFromPath(path: PathAsInput!): PathTypeEnumOutput!
  projectOrderedLocationsFromPath(path: PathAsInput!): [OrderedLocationOutput!]!
  projectMapFromPath(path: PathAsInput!): ID!
  makeTileFilters(
    map: ID!
    type: TileTypeEnumAsInput
    x: Int
    y: Int
  ): [FieldFilterInputProxy!]!
  makeFacilityFilters(
    sim: ID!
    type: FacilityTypeEnumAsInput
    level: ID
    x: Int
    y: Int
  ): [FieldFilterInputProxy!]!
  constructMapObjects(
    id: ID!
    cities: [CityAsInput!]!
    producers: [ProducerAsInput!]!
    facilities: [FacilityAsInput!]!
    paths: [PathAsInput!]!
    vehicles: [VehicleAsInput!]!
    supplyDepots: [SupplyDepotAsInput!]!
  ): SimObjects!
  mapProducersAt(map: ID!, x: Int!, y: Int!): [Producer!]!
  makeOrderedLocationFilters(
    sim: ID!
    x: Int
    y: Int
    order: Int
    path: ID
  ): [FieldFilterInputProxy!]!
  mapCitiesAt(map: ID!, x: Int!, y: Int!): [CityOutput!]!
  tileTypeLand: TileTypeEnumOutput!
  tileTypeWater: TileTypeEnumOutput!
  makeSupplyDepotFilters(
    sim: ID!
    level: ID
    x: Int
    y: Int
  ): [FieldFilterInputProxy!]!
  projectIdFromConsumable(consumable: ConsumableAsInput!): ID!
  projectStorageFromConsumable(consumable: ConsumableAsInput!): StorageOutput!
  projectBasePricePerUnitFromConsumable(consumable: ConsumableAsInput!): Float!
  projectMinPriceBasisPctFromConsumable(consumable: ConsumableAsInput!): Float!
  constructConsumableInputProxy(
    id: ID!
    storage: ID
    basePricePerUnit: Float
    minPriceBasisPct: Float
  ): ConsumableInputProxy!
  CKGErrors: [String]
}

type ResearchStatusEnum {
  id: ID!
}

type SimObjects {
  id: ID!
  cities: [CityOutput!]!
  producers: [Producer!]!
  facilities: [Facility!]!
  paths: [Path!]!
  vehicles: [Vehicle!]!
  supplyDepots: [SupplyDepot!]!
}

input SimObjectsAsInput {
  id: ID!
  cities: [CityAsInput!]!
  producers: [ProducerAsInput!]!
  facilities: [FacilityAsInput!]!
  paths: [PathAsInput!]!
  vehicles: [VehicleAsInput!]!
  supplyDepots: [SupplyDepotAsInput!]!
}

type Simulation {
  id: ID!
  config: SimulationConfigOutput!
  company: Company!
  map: MapOutput!
  step: Float!
  status: SimulationStatusEnumOutput!
}

input SimulationAsInput {
  id: ID!
  config: SimulationConfigAsInput!
  company: CompanyAsInput!
  map: MapAsInput!
  step: Float!
  status: SimulationStatusEnumAsInput!
}

type SimulationConfig {
  id: ID!
  seed: Float!
  mapConfig: MapConfig!
  companyConfig: CompanyConfig!
  cityConfig: CityConfig!
  pathConfigs: [PathConfig!]
}

input SimulationConfigAsInput {
  id: ID!
  seed: Float!
  mapConfig: MapConfigAsInput!
  companyConfig: CompanyConfigAsInput!
  cityConfig: CityConfigAsInput!
  pathConfigs: [PathConfigAsInput!]!
}

type SimulationConfigOutput {
  id: ID!
  seed: Float!
  mapConfig: MapConfig!
  companyConfig: CompanyConfig!
  cityConfig: CityConfig!
  pathConfigs: [PathConfig!]!
}

"""
Autogenerated input for modifying instance of Simulation
"""
type SimulationInputProxy {
  id: ID!
  config: ID
  company: ID
  map: ID
  step: Float
  status: ID
}

type SimulationStatusEnum {
  id: ID!
}

input SimulationStatusEnumAsInput {
  id: ID!
}

type SimulationStatusEnumOutput {
  id: ID!
}

type SimulationStepResult {
  id: ID!
  status: SimulationStatusEnumOutput!
  companyReport: CompanyReportOutput!
}

type Storage {
  id: ID!
  product: ProductTypeEnum!
  capacity: Float!
  amount: Float!
}

type StorageAmount {
  id: ID!
  storage: Storage!
  amount: Float!
}

input StorageAsInput {
  id: ID!
  product: ProductTypeEnumAsInput!
  capacity: Float!
  amount: Float!
}

type StorageInputProxy {
  id: ID!
  product: ID
  capacity: Float
  amount: Float
}

type StorageOutput {
  id: ID!
  product: ProductTypeEnumOutput!
  capacity: Float!
  amount: Float!
}

type StorageTransaction {
  id: ID!
  storage: StorageOutput!
  originalAmount: Float!
  requestedAmount: Float!
  actualAmount: Float!
  ok: Boolean!
}

input StorageTransactionAsInput {
  id: ID!
  storage: StorageAsInput!
  originalAmount: Float!
  requestedAmount: Float!
  actualAmount: Float!
  ok: Boolean!
}

type StorageTransactionReport {
  id: ID!
  withdrawals: [StorageTransaction!]!
  deposits: [StorageTransaction!]!
  withdrawalCommits: [ID!]!
  depositCommits: [ID!]!
  ok: Boolean!
}

input StorageTransactionReportAsInput {
  id: ID!
  withdrawals: [StorageTransactionAsInput!]!
  deposits: [StorageTransactionAsInput!]!
  withdrawalCommits: [ID!]!
  depositCommits: [ID!]!
  ok: Boolean!
}

type SupplyDepot {
  id: ID!
  sim: ID!
  level: SupplyDepotLevelOutput!
  x: Int!
  y: Int!
}

input SupplyDepotAsInput {
  id: ID!
  sim: ID!
  level: SupplyDepotLevelAsInput!
  x: Int!
  y: Int!
}

"""
Autogenerated input for modifying instance of SupplyDepot
"""
type SupplyDepotInputProxy {
  id: ID!
  sim: ID
  level: ID
  x: Int
  y: Int
}

type SupplyDepotLevel {
  id: ID!
  storage: [Storage!]
  nextLevel: ID
  actionRequirements: [ActionTypeRequirement!]
}

input SupplyDepotLevelAsInput {
  id: ID!
  storage: [StorageAsInput!]!
  nextLevel: ID
  actionRequirements: [ActionTypeRequirementAsInput!]!
}

type SupplyDepotLevelOutput {
  id: ID!
  storage: [StorageOutput!]!
  nextLevel: ID
  actionRequirements: [ActionTypeRequirement!]!
}

type Tile {
  id: ID!
  map: ID!
  type: TileTypeEnumOutput!
  x: Int!
  y: Int!
}

input TileAsInput {
  id: ID!
  map: ID!
  type: TileTypeEnumAsInput!
  x: Int!
  y: Int!
}

type TileTypeEnum {
  id: ID!
}

input TileTypeEnumAsInput {
  id: ID!
}

type TileTypeEnumOutput {
  id: ID!
}

"""
RFC 3339 compatible time representation, with mandatory time zone. Acceptable format is HH:mm:ss[.SSS](`Z`|(`+`/`-`)HH:mm)
"""
scalar Time

"""
Autogenerated input for modifying instance of ActionInputProxy
"""
input UpdateActionInputProxyInput {
  id: ID!
  type: ID
  object: ID
}

"""
Autogenerated input for modifying instance of ActionObjectUnion
"""
input UpdateActionObjectUnionInput {
  id: ID!
  producer: ID
  facility: ID
  vehicle: ID
  pathType: ID
  tiles: [ID]
  order: ID
}

"""
Autogenerated input for modifying instance of ActionObjectUnionInputProxy
"""
input UpdateActionObjectUnionInputProxyInput {
  id: ID!
  producer: ID
  facility: ID
  vehicle: ID
  pathType: ID
  tiles: [ID]
  order: ID
}

"""
Autogenerated input for modifying instance of ActionProgress
"""
input UpdateActionProgressInput {
  id: ID!
  type: ID
  step: Float
  remainingSteps: Float
  status: ID
  info: String
  object: ID
  sim: ID
}

"""
Autogenerated input for modifying instance of ActionProgressInputProxy
"""
input UpdateActionProgressInputProxyInput {
  id: ID!
  action: ID
  step: Float
  remainingSteps: Float
  status: ID
  info: String
}

"""
Autogenerated input for modifying instance of ActionsReport
"""
input UpdateActionsReportInput {
  id: ID!
  progress: [ID]
  ok: Boolean
}

"""
Autogenerated input for modifying instance of ActionStatusEnum
"""
input UpdateActionStatusEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of ActionTypeEnum
"""
input UpdateActionTypeEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of ActionTypeRequirement
"""
input UpdateActionTypeRequirementInput {
  id: ID!
  type: ID
  time: Float
  cost: Float
  inputs: [ID]
}

"""
Autogenerated input for modifying instance of CitiesReport
"""
input UpdateCitiesReportInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of CityConfig
"""
input UpdateCityConfigInput {
  id: ID!
  growthRate: Float
  declineRate: Float
  initialPopulation: Float
  demandsPerPersonPerStep: [ID]
  defaultLevel: ID
  consumables: [ID]
  density: Float
}

"""
Autogenerated input for modifying instance of City
"""
input UpdateCityInput {
  id: ID!
  sim: ID
  population: Float
  consumables: [ID]
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of CityInputProxy
"""
input UpdateCityInputProxyInput {
  id: ID!
  sim: ID
  population: Float
  consumables: [ID]
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of CityLevel
"""
input UpdateCityLevelInput {
  id: ID!
  storageCapacityModifier: Float
  actionTypeRequirements: [ID]
  nextLevel: ID
}

"""
Autogenerated input for modifying instance of CompanyConfig
"""
input UpdateCompanyConfigInput {
  id: ID!
  initialCredit: Float
}

"""
Autogenerated input for modifying instance of Company
"""
input UpdateCompanyInput {
  id: ID!
  name: String
  credit: Float
  facilityUnlocks: [ID]
  vehicleUnlocks: [ID]
  producerUnlocks: [ID]
  storageDepotUnlocks: [ID]
  config: ID
}

"""
Autogenerated input for modifying instance of CompanyInputProxy
"""
input UpdateCompanyInputProxyInput {
  id: ID!
  name: String
  credit: Float
  facilityUnlocks: [ID]
  vehicleUnlocks: [ID]
  producerUnlocks: [ID]
  storageDepotUnlocks: [ID]
  config: ID
}

"""
Autogenerated input for modifying instance of CompanyReport
"""
input UpdateCompanyReportInput {
  id: ID!
  production: ID
  actions: ID
}

"""
Autogenerated input for modifying instance of Consumable
"""
input UpdateConsumableInput {
  id: ID!
  storage: ID
  basePricePerUnit: Float
  minPriceBasisPct: Float
}

"""
Autogenerated input for modifying instance of ConsumableInputProxy
"""
input UpdateConsumableInputProxyInput {
  id: ID!
  storage: ID
  basePricePerUnit: Float
  minPriceBasisPct: Float
}

"""
Autogenerated input for modifying instance of CounterpartyUnion
"""
input UpdateCounterpartyUnionInput {
  id: ID!
  city: ID
  producer: ID
}

"""
Autogenerated input for modifying instance of Facility
"""
input UpdateFacilityInput {
  id: ID!
  sim: ID
  type: ID
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of FacilityInputProxy
"""
input UpdateFacilityInputProxyInput {
  id: ID!
  sim: ID
  type: ID
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of FacilityLevel
"""
input UpdateFacilityLevelInput {
  id: ID!
  type: ID
  nextLevel: ID
  maxVehicleLevel: ID
  energyDemandBaseline: Float
  fuelDemandBaseline: Float
  fuelStorage: ID
  perVehicleEnergyFactor: Float
  perVehicleFuelFactor: Float
  repairEfficiency: Float
  actionRequirements: [ID]
}

"""
Autogenerated input for modifying instance of FacilityTypeEnum
"""
input UpdateFacilityTypeEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of FieldFilterInputProxy
"""
input UpdateFieldFilterInputProxyInput {
  id: ID
  fieldName: String
  op: String
  value: ID
}

"""
Autogenerated input for modifying instance of FieldValue
"""
input UpdateFieldValueInput {
  """
  Ephemeral ID
  """
  id: ID!
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

"""
Autogenerated input for modifying instance of FinancialReport
"""
input UpdateFinancialReportInput {
  id: ID!
  costs: Float
  revenue: Float
  profit: Float
}

"""
Autogenerated input for modifying instance of MapArea
"""
input UpdateMapAreaInput {
  id: ID!
  mapId: ID
  tileIds: ID
}

"""
Autogenerated input for modifying instance of MapConfig
"""
input UpdateMapConfigInput {
  id: ID!
  loadConfig: ID
  generateConfig: ID
}

"""
Autogenerated input for modifying instance of MapGenerationConfig
"""
input UpdateMapGenerationConfigInput {
  id: ID!
  sizeX: Int
  sizeY: Int
}

"""
Autogenerated input for modifying instance of Map
"""
input UpdateMapInput {
  id: ID!
  sizeX: Int
  sizeY: Int
}

"""
Autogenerated input for modifying instance of MapInputProxy
"""
input UpdateMapInputProxyInput {
  id: ID!
  sizeX: Int
  sizeY: Int
}

"""
Autogenerated input for modifying instance of MapLoadConfig
"""
input UpdateMapLoadConfigInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of OrderedLocation
"""
input UpdateOrderedLocationInput {
  id: ID!
  order: Int
  x: Int
  y: Int
  sim: ID
  path: ID
}

"""
Autogenerated input for modifying instance of Order
"""
input UpdateOrderInput {
  id: ID!
  product: ID
  orderType: ID
  vehicle: ID
  paths: [ID]
  counterparty: ID
  sim: ID
}

"""
Autogenerated input for modifying instance of OrderTypeEnum
"""
input UpdateOrderTypeEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of PathConfig
"""
input UpdatePathConfigInput {
  id: ID!
  type: ID
  actionRequirements: [ID]
}

"""
Autogenerated input for modifying instance of Path
"""
input UpdatePathInput {
  id: ID!
  type: ID
  orderedLocations: [ID]
  sim: ID
}

"""
Autogenerated input for modifying instance of PathInputProxy
"""
input UpdatePathInputProxyInput {
  id: ID!
  type: ID
  orderedLocations: [ID]
  sim: ID
}

"""
Autogenerated input for modifying instance of PathTypeEnum
"""
input UpdatePathTypeEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of Producer
"""
input UpdateProducerInput {
  id: ID!
  sim: ID
  level: ID
  storage: [ID]
  type: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of ProducerInputProxy
"""
input UpdateProducerInputProxyInput {
  id: ID!
  sim: ID
  level: ID
  storage: [ID]
  type: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of ProducerLevel
"""
input UpdateProducerLevelInput {
  id: ID!
  actionRequirements: [ID]
  baseCostPerUnit: Float
  stoppageSurchargeRate: Float
  nextLevel: ID
  inputs: [ID]
  outputs: [ID]
  storage: [ID]
}

"""
Autogenerated input for modifying instance of ProducerTypeEnum
"""
input UpdateProducerTypeEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of ProductionReport
"""
input UpdateProductionReportInput {
  id: ID!
  producerReports: [ID]
  ok: Boolean
}

"""
Autogenerated input for modifying instance of ProductQuantity
"""
input UpdateProductQuantityInput {
  id: ID!
  type: ID
  quantity: Float
}

"""
Autogenerated input for modifying instance of ProductTypeEnum
"""
input UpdateProductTypeEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of ResearchStatusEnum
"""
input UpdateResearchStatusEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of SimObjects
"""
input UpdateSimObjectsInput {
  id: ID!
  cities: [ID]
  producers: [ID]
  facilities: [ID]
  paths: [ID]
  vehicles: [ID]
  supplyDepots: [ID]
}

"""
Autogenerated input for modifying instance of SimulationConfig
"""
input UpdateSimulationConfigInput {
  id: ID!
  seed: Float
  mapConfig: ID
  companyConfig: ID
  cityConfig: ID
  pathConfigs: [ID]
}

"""
Autogenerated input for modifying instance of Simulation
"""
input UpdateSimulationInput {
  id: ID!
  config: ID
  company: ID
  map: ID
  step: Float
  status: ID
}

"""
Autogenerated input for modifying instance of SimulationInputProxy
"""
input UpdateSimulationInputProxyInput {
  id: ID!
  config: ID
  company: ID
  map: ID
  step: Float
  status: ID
}

"""
Autogenerated input for modifying instance of SimulationStatusEnum
"""
input UpdateSimulationStatusEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of SimulationStepResult
"""
input UpdateSimulationStepResultInput {
  id: ID!
  status: ID
  companyReport: ID
}

"""
Autogenerated input for modifying instance of StorageAmount
"""
input UpdateStorageAmountInput {
  id: ID!
  storage: ID
  amount: Float
}

"""
Autogenerated input for modifying instance of Storage
"""
input UpdateStorageInput {
  id: ID!
  product: ID
  capacity: Float
  amount: Float
}

"""
Autogenerated input for modifying instance of StorageInputProxy
"""
input UpdateStorageInputProxyInput {
  id: ID!
  product: ID
  capacity: Float
  amount: Float
}

"""
Autogenerated input for modifying instance of StorageTransaction
"""
input UpdateStorageTransactionInput {
  id: ID!
  storage: ID
  originalAmount: Float
  requestedAmount: Float
  actualAmount: Float
  ok: Boolean
}

"""
Autogenerated input for modifying instance of StorageTransactionReport
"""
input UpdateStorageTransactionReportInput {
  id: ID!
  withdrawals: [ID]
  deposits: [ID]
  withdrawalCommits: [ID]
  depositCommits: [ID]
  ok: Boolean
}

"""
Autogenerated input for modifying instance of SupplyDepot
"""
input UpdateSupplyDepotInput {
  id: ID!
  sim: ID
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of SupplyDepotInputProxy
"""
input UpdateSupplyDepotInputProxyInput {
  id: ID!
  sim: ID
  level: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of SupplyDepotLevel
"""
input UpdateSupplyDepotLevelInput {
  id: ID!
  storage: [ID]
  nextLevel: ID
  actionRequirements: [ID]
}

"""
Autogenerated input for modifying instance of Tile
"""
input UpdateTileInput {
  id: ID!
  map: ID
  type: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of TileTypeEnum
"""
input UpdateTileTypeEnumInput {
  id: ID!
}

"""
Autogenerated input for modifying instance of Vehicle
"""
input UpdateVehicleInput {
  id: ID!
  level: ID
  sim: ID
  type: ID
  facility: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of VehicleInputProxy
"""
input UpdateVehicleInputProxyInput {
  id: ID!
  level: ID
  sim: ID
  type: ID
  facility: ID
  x: Int
  y: Int
}

"""
Autogenerated input for modifying instance of VehicleLevel
"""
input UpdateVehicleLevelInput {
  id: ID!
  cargoCapacity: [ID]
  maxSpeed: Float
  maxDistance: Float
  reliability: Float
  maintainAfterSteps: Int
  durability: Float
}

"""
Autogenerated input for modifying instance of VehiclePathCompatibility
"""
input UpdateVehiclePathCompatibilityInput {
  id: ID!
  vehicleType: ID
  pathType: ID
}

"""
Autogenerated input for modifying instance of VehicleTypeEnum
"""
input UpdateVehicleTypeEnumInput {
  id: ID!
}

type Vehicle {
  id: ID!
  level: VehicleLevel!
  sim: ID!
  type: VehicleTypeEnumOutput!
  facility: ID!
  x: Int!
  y: Int!
}

input VehicleAsInput {
  id: ID!
  level: VehicleLevelAsInput!
  sim: ID!
  type: VehicleTypeEnumAsInput!
  facility: ID!
  x: Int!
  y: Int!
}

"""
Autogenerated input for modifying instance of Vehicle
"""
type VehicleInputProxy {
  id: ID!
  level: ID
  sim: ID
  type: ID
  facility: ID
  x: Int
  y: Int
}

type VehicleLevel {
  id: ID!
  cargoCapacity: [ProductQuantity!]!
  maxSpeed: Float!
  maxDistance: Float!
  reliability: Float!
  maintainAfterSteps: Int!
  durability: Float!
}

input VehicleLevelAsInput {
  id: ID!
  cargoCapacity: [ProductQuantityAsInput!]!
  maxSpeed: Float!
  maxDistance: Float!
  reliability: Float!
  maintainAfterSteps: Int!
  durability: Float!
}

type VehiclePathCompatibility {
  id: ID!
  vehicleType: VehicleTypeEnum!
  pathType: PathTypeEnum!
}

type VehicleTypeEnum {
  id: ID!
}

input VehicleTypeEnumAsInput {
  id: ID!
}

type VehicleTypeEnumOutput {
  id: ID!
}
